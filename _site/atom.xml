<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>tsucchi の日記 2nd season</title>
 <link href="http://tsucchi.github.com//atom.xml" rel="self"/>
 <link href="http://tsucchi.github.com/"/>
 <updated>2013-01-14T13:37:40+09:00</updated>
 <id>http://tsucchi.github.com/</id>
 <author>
   <name>tsucchi</name>
   <email>tsucchi@cpan.org</email>
 </author>

 
 <entry>
   <title>スパコンの話。あるいは、僕がちょっとだけ触れたスーパーコンピュータの世界</title>
   <link href="http://tsucchi.github.com//hpc/2013/01/14/supercomputer"/>
   <updated>2013-01-14T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//hpc/2013/01/14/supercomputer</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://satoshi.blogs.com/life/2013/01/kei.html&quot;&gt;スパコン「京」に関する素朴な疑問&lt;/a&gt;とかいう、大変ひどい記事があったので、ちょっと昔の事思い出しながら書いてみようと思う。&lt;/p&gt;

&lt;p&gt;まず、自分のスタンスを書いときますが、京については、「悪くは無いと思うけど、お金は高すぎだよな」と思ってます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20091128/1259416601&quot;&gt;京速計算機とか長崎のアレとかに思うこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;その上で、素人(僕も素人に毛の生えた程度なので、対して変わらないけど)がろくすっぽ調査もしないで、適当な事書くのもまあ勝手といえば勝手だけど、記事書いたら100ブクマとか付くような人は、「もうちょい注意してよ」、って思う。&lt;/p&gt;

&lt;p&gt;さて、まーいろいろひどいんだけど、特にひどいのはこの3点かな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;専用のスパコンに投資するより、GPGPUを搭載した汎用サーバーをクラウドに大量においてサービスとして提供し、ニーズに応じて台数を増やしていった方がはるかに安いし柔軟性があるのではないか？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;京を使えば６時間で出来ると言っても、その時間を確保するのに６ヶ月かかるんだったらアマゾンからGPGPU付きのサーバーを１０００台借りて数日間走らせた方が手っ取り早くないか？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;日本のIT業界の将来を考えれば、スパコンで１位を取ることよりも、世界市場でアマゾンのAWSとまっこうから戦えるサービスを提供できる日本企業が存在しないことを問題視すべきではないか？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;まず、1点めですが、スパコンの計算って、モノにもよるかもしれないけど、基本的にクラウドサービスでできるもんじゃありません。たとえば、スイッチを複数台またぐだけで性能出ないことがある、とかそのくらいシビアな事もあります(そういうケース実際に見た)。クライドサービスで、ネットワークのトポロジまでカスタマイズできれば大丈夫でしょうけど、それってもはやクラウドサービスじゃねえよな。&lt;/p&gt;

&lt;p&gt;あと、GPGPUとか、アクセラレータの類を使う場合ですが、大抵それ用にコードを書き換えないと性能が出ないらしいです。アレ系は、普通の CPU と癖がかなり違うので、得意な処理と不得意な処理があるため、らしいです(または、そもそもアクセラレータに処理を振るために専用の SDK 使わなきゃだめだったり）。僕が生きている間くらいには、この辺意識しなくてもコンパイラが最適化してくれるようになるかもしれませんが、現状は無理らしいです。京は普通の並列計算機だから、わりとそのままプログラム使えるんじゃないかな。逆にアクセラレータ積んでるやつのほうが、シミュレーションの再利用とか難しいんじゃないかな、と思います。&lt;/p&gt;

&lt;p&gt;2点め。スパコンの計算って、数日間走らせるようなものじゃありません。計算する時は、taskset とか numactl つかって、CPU をプロセスに張り付けて、メモリも目一杯つかって走らせたりします。サーバの状態が「CPU が 100% 張り付いて、メモリ使用率も 100% 」って、業務系や Web 系の人たち何て呼びます？そう、「障害」です。まあ実際は計算できてるから障害じゃないけど、HPC 以外のエンジニアであれば、避けなきゃいけないような使い方します。なので、数百台〜1000台とかで、そういう使い方すると、結構な確率で壊れたり、途中で失敗したりします。計算に数日かかるようなやつだと、完走率どのくらいかなー？何回走らせればできるかなー？怖いなー、と思います。数日走らなきゃ終わらせられない場合もあるでしょうけど、基本的には数時間で終わらせたいんじゃないかなー。&lt;/p&gt;

&lt;p&gt;3点め。TOP500 の上位は大体、軍事系とかの国策でやっているものです。国として、米国や中国に勝たなくていいんなら、いいんじゃない？僕はダメだと思うけど。あと、AWS は今回 TOP500 の 102位なので、HPC用のやつ全力でそのくらいなのでしょう。普通に京とか TSUBAME とか貸してもらった方がいいんじゃないかな。&lt;/p&gt;

&lt;p&gt;あと、長崎のアレは、前に記事かいたので、再掲しておこう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20091127/1259335066&quot;&gt;長崎のアレについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;「安価」っていってるけど、これ多分 HW 代だけですので、そこのところ注意しないとね、という話。&lt;/p&gt;

&lt;p&gt;と、まあこの世界から離れてずいぶん経つし、専門家でもないので、間違いもあるかもしれませんが、こんな感じで。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL::Executor 0.14 をリリースしました。もしくは ORM とか関連モジュールはこれでいいんじゃね？という話。</title>
   <link href="http://tsucchi.github.com//cpan/2013/01/06/sql_executor"/>
   <updated>2013-01-06T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//cpan/2013/01/06/sql_executor</id>
   <content type="html">&lt;p&gt;表記のとおり、&lt;a href=&quot;http://search.cpan.org/~tsucchi/SQL-Executor-0.14/lib/SQL/Executor.pm&quot;&gt;SQL::Executor 0.14&lt;/a&gt;をリリースしました。&lt;/p&gt;

&lt;p&gt;今回、connect() という DBI っぽいコンストラクタを付けました。んで、connect 経由でインスタンス作ると、内部で&lt;a href=&quot;http://search.cpan.org/dist/DBIx-Handler/&quot;&gt;DBIx::Handler&lt;/a&gt;を生成して、コネクション管理をしてもらったり、コレを使ったトランザクション管理ができるようになります。&lt;/p&gt;

&lt;p&gt;ちょい前に、&lt;a href=&quot;https://github.com/tsucchi/p5-DBIx-Decorator&quot;&gt;こんなん&lt;/a&gt;書いてみたりして、dbh をいい感じに拡張できたらいい感じになるんじゃね？と思ってたのですが、めんどい割には得るものが少なそうで、今現在、DBIx::Handler っていう良いものがあるんだから、そっち使った方が幸せかな、という結論に至りました。&lt;/p&gt;

&lt;p&gt;まだ、コレ使ったコネクション/トランザクション管理への移行は済ませてないので、バグあるかもです。月曜以降ちょいちょい試してみたいと思います。&lt;/p&gt;

&lt;p&gt;先走って試しちゃってバグ見つけたりしたら、cpan RT or github issue or @tsucchi あたりで連絡いただければ、と思います。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>あけましておめでとうございます</title>
   <link href="http://tsucchi.github.com//misc/2013/01/04/newyear"/>
   <updated>2013-01-04T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//misc/2013/01/04/newyear</id>
   <content type="html">&lt;p&gt;あけましておめでとうございます。&lt;/p&gt;

&lt;p&gt;さてさて、&lt;a href=&quot;/misc/2012/12/31/matome&quot;&gt;昨年大晦日にも書きました&lt;/a&gt;が、いい年したおっさんなのに、17歳くらいの若者ばりの悩みを抱える今日この頃であります。その倍くらい生きてるんだけどねー。。。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/misc/2012/10/06/zatsudan_after_yapc/&quot;&gt;最近何となく考えてたこととか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/misc/2012/10/22/age_plus_plus&quot;&gt;年齢++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/milkyholms/2012/12/14/izsm&quot;&gt;ミルキィホームズ ライブ in 武道館の、橘田いずみさんの話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;br&gt;


&lt;br&gt;


&lt;br&gt;


&lt;p&gt;まー、今日はちょい酔っ払ってるし、いい加減ぶっちゃけた方が楽なのかなー、とも思うので差し障り無い程度にちゃんと書こうかな。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;昨年後半くらいから、&lt;/p&gt;

&lt;p&gt;家庭で問題発生 -&gt; ストレス(※) -&gt; 仕事うまくいかない -&gt; ストレス -&gt; ※に戻る&lt;/p&gt;

&lt;p&gt;というネガティブフィードバックが発生しました。&lt;/p&gt;

&lt;p&gt;Kent Beckの&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4894717115/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;tag=tsucchisblog-22&amp;linkCode=as2&amp;camp=247&amp;creative=1211&amp;creativeASIN=4894717115&quot;&gt;テスト駆動開発入門&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=tsucchisblog-22&amp;l=as2&amp;o=9&amp;a=4894717115&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;によると、ネガティブフィードバックを解消するには、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;新しい要素の追加&lt;/li&gt;
&lt;li&gt;既存の要素の置き換え&lt;/li&gt;
&lt;li&gt;矢印の変更&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;のいずれかの方法で対処するのだそうです。&lt;/p&gt;

&lt;p&gt;で、昨年11月末〜12月始くらいは、「新しい要素の追加」、具体的にはミルキィなんとか、その辺駆使して何とかしてたんですよね。ですが、12月始くらいに落ち着くと思ってた仕事まわりが、落ち着くどころか負荷がさらに増えてしまって、お腹痛いし眠れないし、「あーこのままだと死んじゃうかも」とか思ったので、別の手(「矢印の変更」かな？)を打って、一応無事に年末年始を迎えることができました、というのが、前に「思い出したくない」と書いた昨年後半の主な出来事でした。(これじゃ分からんよね。でもこれ以上細かく書くのは、だいぶ恥ずかしいし、いろんな人に迷惑かかるかもだから、もうこれ以上は無理。)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;さてさて、新年だから、昨年の反省を踏まえて抱負的なものを書くのかな？&lt;/p&gt;

&lt;p&gt;えーっと、昨年の反省どころか、色々発生しまくった昨年後半の問題を解決しきっていないので、その辺なんとかしないといけません。その上で、中2だか高2だかみたいな、「オレは何者で、何ができるのだろう？」みたいな、冒頭に挙げた悩みも解消していかなきゃいけません。&lt;/p&gt;

&lt;p&gt;んで、最近つぶやいたり、多分ここにもちょっと書いたりしていますが、僕はわりとマジで、「僕の技術を通じて世の中を幸せにしたい」と考えているし、願っています。最初にこのことに気づいたときは結構恥ずかしかったりもしたのだけど、今は何回か書いちゃったこともあり、多分実際に口に出して公言してもそんなに恥ずかしくないんじゃないかなー、と思っていたりします。(ヘタレなので、まだ人に直接話したことは無い。)&lt;/p&gt;

&lt;p&gt;で、そんないろんな事を踏まえて、「まだ見つけてないものとか、これから見つけなきゃいけないものが色々あるのではないか」と昨年末頃考えておりました。&lt;/p&gt;

&lt;p&gt;そしたら、今年初めに、奇しくもこんなのが。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20130104.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;つーわけで、僕も色んなものを「探す」一年としなくてはいけないのかなー、と思っています。&lt;/p&gt;

&lt;iframe src=&quot;http://rcm-jp.amazon.co.jp/e/cm?t=tsucchisblog-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4894717115&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&quot; style=&quot;width:120px;height:240px;&quot; scrolling=&quot;no&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>2012年の振り返り</title>
   <link href="http://tsucchi.github.com//misc/2012/12/31/matome"/>
   <updated>2012-12-31T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//misc/2012/12/31/matome</id>
   <content type="html">&lt;h3&gt;1月〜3月ごろ&lt;/h3&gt;

&lt;p&gt;ORM 使いたくなって、Teng 試したりしてたらしい。あんま記事書いてないから良く分かんないや。。。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120217/1329490205&quot;&gt;Teng の Row オブジェクトをテストする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120303/1330730457&quot;&gt;Teng の不具合をみつけて直してもらったのと、機能追加してもらった話 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;4月〜6月ごろ&lt;/h3&gt;

&lt;p&gt;GW中に、&lt;a href=&quot;http://search.cpan.org/dist/SQL-Executor/&quot;&gt;SQL::Executor&lt;/a&gt;ってモジュールを書いた。多分 ORM を自作する覚悟をしていたのかな。で、6月から自作してるみたいだ。なんか DB まわりで色々考えたり悩んでたりしてたみたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120403/1333405710&quot;&gt;DBのスキーマ変更をテストする &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120422/1335081999&quot;&gt;Webエンジニアのための データベース技術[実践]入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120514/1337015637&quot;&gt;最近のお仕事の話とか、ORM のはなしとか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120518/1337356297&quot;&gt;主キーが決まらないとき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120525/1337957432&quot;&gt;ORM とかテーブルデータゲートウェイとか、その周辺の話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120604/1338780295&quot;&gt;Kappa という ORM を書いてみた話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120630/1341035071&quot;&gt;SQL::Executor 0.11 をリリースしました &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;この頃、超忙しかったはずなのだが、結構記事書いてるなー。で、超忙しかったので見事に腰痛を再発させ現在に至る。&lt;/p&gt;

&lt;h3&gt;7月〜9月ごろ&lt;/h3&gt;

&lt;p&gt;メインの blog をはてダから、github pages に移した。それから YAPC の準備したり、発表したり。今年も発表できて良かったです。あとは、&lt;a href=&quot;http://milky-holmes-anime.com/&quot;&gt;ミルキィホームズ&lt;/a&gt;の再放送を偶然視聴し、ハマってみたり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/blog/2012/07/14/github-pages&quot;&gt;gibhub pages + jekyll で blog 作ってみました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/blog/2012/07/14/github-pages2&quot;&gt;gibhub pages + jekyll で blog 作ってみましたの続き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/kappa/2012/09/15/kappa_background&quot;&gt;Kappa の飼い方(Kappa という ORM の話) その1 開発の背景のお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/event/2012/09/23/gameshow_majimena_hanashi&quot;&gt;東京ゲームショウに行ってきた(もう少し真面目な？話)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/yapcasia/2012/09/28/yapc_day1&quot;&gt;YAPC::Asia 2012 初日でした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/yapcasia/2012/09/29/yapc_happyou&quot;&gt;YAPC::Asia 2012 発表資料「Perl と SQL のいろいろ」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/yapcasia/2012/09/30/yapc_day2&quot;&gt;昨日はYAPC::Asia 2012 2日め(最終日)でした。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;10月〜12月&lt;/h3&gt;

&lt;p&gt;YAPC 後にいろいろフィードバックがあって、mod_perl 配下で __DATA__ セクションを使うために色々試してみたりした。今ではプロダクトコードでも使っているのだけど、Kappa さん本体にフィードバックしてないので、早めにやらないと。他にも ORM とかその周辺機能についてアレコレ考えたりしてたけど、あんま記事書いてないなー。このへんも自分なりの結論は出たので、早めに書かないと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/mod_perl/2012/10/19/mod_perl_and_data_section&quot;&gt;mod_perl 環境でも Data::Section::Simple 使えるかも&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;11月以降は思い出したくないですね。。。&lt;/p&gt;

&lt;h3&gt;その他&lt;/h3&gt;

&lt;p&gt;前も書いたのですが、今年で 34になりましたので、来年で定年(笑)なワケです。そんな中で、お仕事って何だろう？僕の夢って何だろ？みたいなことに、ガラにもなく悩んでたりする今日この頃です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/misc/2012/10/06/zatsudan_after_yapc/&quot;&gt;最近何となく考えてたこととか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/misc/2012/10/22/age_plus_plus&quot;&gt;年齢++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tsucchi.github.com/milkyholms/2012/12/14/izsm&quot;&gt;ミルキィホームズ ライブ in 武道館の、橘田いずみさんの話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;来年が良い年になるように、精進しないといけないですねー。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>変調された音とそうでない音と</title>
   <link href="http://tsucchi.github.com//music/2012/12/23/music"/>
   <updated>2012-12-23T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//music/2012/12/23/music</id>
   <content type="html">&lt;p&gt;ちょっと前、&lt;a href=&quot;http://anond.hatelabo.jp/20100920233848&quot;&gt;初音ミクと見せかけの魔法&lt;/a&gt; というすごい記事を見た。&lt;/p&gt;

&lt;p&gt;ピアノの発明が音楽の歴史を変えたこと、初音ミクの出現が同じように音楽の歴史を変えつつあること、が書いてある。音楽やってる人なら、きっと興味深く読めると思うし、そうじゃない人も読んでほしいくらい良記事なので、読んでみてほしい。ってか僕は感動して危うく会社で泣くところだった。(一応20年くらい音楽やってたからね。最近ご無沙汰だけどさ)&lt;/p&gt;

&lt;p&gt;で、僕も初音ミクすごいと思うし、アレつかって曲作ったり既存の歌歌ってみたりさせてる人達すごいと思うんですよ。僕はエンジニアで音楽の素養もあるけど、ミク作れないし、ミク使って何か作るのも多分できないからね。&lt;/p&gt;

&lt;p&gt;でもね、だけどね。。。&lt;/p&gt;

&lt;p&gt;昨日、ヒャダインの&lt;a href=&quot;http://www.amazon.co.jp/gp/product/B0098KQFMK/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;tag=tsucchisblog-22&amp;linkCode=as2&amp;camp=247&amp;creative=1211&amp;creativeASIN=B0098KQFMK&quot;&gt;20112012&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=tsucchisblog-22&amp;l=as2&amp;o=9&amp;a=B0098KQFMK&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;借りてきて、&lt;a href=&quot;http://www.nicovideo.jp/watch/sm19447455&quot;&gt;「ヒャダインとももクロのじょーじょーゆーじょー」&lt;/a&gt;聞いてたら、「あ、こっちの方がいいなー」って思ったのね。(オリジナル版は、ヒャダイン本人が変調した女声を使ってる。)&lt;/p&gt;

&lt;p&gt;で、前もこういうのあったなー、と思ったら、&lt;a href=&quot;http://www.nicovideo.jp/watch/1350358455&quot;&gt;みもりん(三森すずこ)のストロボラスト&lt;/a&gt;だ。こっちの&lt;a href=&quot;http://www.nicovideo.jp/watch/nm13359285&quot;&gt;原曲&lt;/a&gt;はミクのやつで、ラストで逆再生とか訳分かんないことやってるけど、それが合ってるというすごい曲なんだよね。&lt;/p&gt;

&lt;p&gt;でも歌はミクより、みもりんの方がいいなー、と僕は思うのです。&lt;/p&gt;

&lt;p&gt;いや、繰り返しになるけど、ミクすごいと思いますよ。アレ、半分人工音だけど、気持ち悪さ無いもんね。声に&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E4%B8%8D%E6%B0%97%E5%91%B3%E3%81%AE%E8%B0%B7&quot;&gt;不気味の谷&lt;/a&gt;があるのかどうか、分からないけど、あったとしても多分もう谷を越えていると思いますもん。&lt;/p&gt;

&lt;p&gt;ただ、現時点では、まだ生身の声の方が、ボーカロイドよりもちょっと上なのかなー、と思っただけの話です。&lt;/p&gt;

&lt;p&gt;でもこれってそんなに悲観したことじゃなくて、いつかもっとテクノロジーが進化したら、生身の歌声と区別つかないような、そういうのが作れる日が多分来るし、そんな風に技術を通じて世の中を少しずつハッピーにしていくのが我々技術者の使命ですからね。&lt;/p&gt;

&lt;p&gt;一番最初に挙げた記事にも似たような事書いてあるのだけど、例えば僕が何か曲作ったとして、それを歌の上手な女の子に歌ってほしくても、普通の人はそんなアテ無いじゃないですか。でも、初音ミクならそれができる。で、技術がもっと進歩したら、人の声とまったく区別がつかないような、そういうのができるかもしれない。&lt;/p&gt;

&lt;p&gt;そうなったとき、音楽が、世界がどういう風に変わるのか、見てみたいなー、と思ったのでした。&lt;/p&gt;

&lt;br&gt;


&lt;br&gt;


&lt;br&gt;


&lt;iframe src=&quot;http://rcm-jp.amazon.co.jp/e/cm?t=tsucchisblog-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=B0098KQFMK&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&quot; style=&quot;width:120px;height:240px;&quot; scrolling=&quot;no&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>ミルキィホームズ ライブ in 武道館の、橘田いずみさんの話</title>
   <link href="http://tsucchi.github.com//milkyholms/2012/12/14/izsm"/>
   <updated>2012-12-14T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//milkyholms/2012/12/14/izsm</id>
   <content type="html">&lt;p&gt;ミルキィホームズの、武道館ライブ。&lt;/p&gt;

&lt;iframe src=&quot;http://rcm-jp.amazon.co.jp/e/cm?t=tsucchisblog-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=B009AYB44I&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&quot; style=&quot;width:120px;height:240px;&quot; scrolling=&quot;no&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;


&lt;p&gt;本当に素晴らしいライブで、「楽しそうだなー、いいなー、行きたかったなー」と思う(僕は今年の夏のアニメ再放送でハマった新参者なので、当時はミルキィの存在すら知らなかった)のですが、その中で、アンコール MC の 4 人のコメントが本当に素晴らしいです。「声優になりたいな、なれるかな？」「ミルキィホームズという作品とメンバーに出会えてよかった」という、同じ内容の話なのですが、それぞれ4人が自分の言葉で話すとみんな違う魅力的な話になるから不思議なものです。&lt;/p&gt;

&lt;p&gt;で、特に橘田いずみさんのコメントが特に素晴らしかったので、頑張って文字起こししてみたので、読んでいただければさいわいです。(一部口語を文章体に変えてます)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;私は声優を目指したのが、大学を卒業してからで、それまでずっと、「声優になりたい」とか言ってても、まわりは、「あっそうか」みたいな感じだったんです。でもやっぱり諦めきれなくて、そこから養成所に入って、色々やって、いまここに立てているわけですが、その頃に「なりたい自分とならなきゃいけない自分は違うんだよ」とか良く言われていて、でも今「なりたい自分」でいられるこの空間がすごい幸せなんだな、って思います。多分、「なりたい自分でいれる所に立ててる人」ってそんなにいないかな、って思うので、このミルキィホームズという作品に出会えたことが私の人生で本当に大きいことで、これがなかったら私、こんなハイテンションな人間じゃなかったんじゃないかな、って思うくらい素の自分が出せた初めての場所だったんじゃないかって気がします。ほんと「でっかい子供」ってメンバーからもいつも言われるくらい、一番年上なのにいつもダメダメで、(佐々木)未来が一番しっかりしていたりする逆転なこのユニットなんですけど、(でも、)だから3人じゃなかったら私ここまで頑張れなかったのかな、って思うこともあったりするので、本当に皆さんと、そして本当にミルキィホームズを愛してくれて、橘田いずみを好きになってくれた皆さんに本当に感謝します、ありがとうございます。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いず様(橘田さんの愛称ね)は、普段はぶっ飛んでいて、百合好きだし、まあ正直&lt;a href=&quot;http://dic.nicovideo.jp/a/%E6%AE%8B%E5%BF%B5%E3%81%AA%E7%BE%8E%E4%BA%BA&quot;&gt;「残念な美人」&lt;/a&gt;って感じなのですが、なんというか、最近僕自身が「自分の夢って何だろーな」って考えることが多くて、結構悩んでたので、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;「なりたい自分とならなきゃいけない自分は違うんだよ」とか良く言われていて、でも今「なりたい自分」でいられるこの空間がすごい幸せなんだな、って思います。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のくだりで危うく泣きそうになったのでした。そうだよね、「なりたい自分」でありたいよね、そうだったら幸せだよね。&lt;/p&gt;

&lt;p&gt;さてさて、最後までこの与太話を読んでくれた方がどのくらいいるか、分からないですが、ちょっとでもミルキィホームズに興味を持ってくれたなら、今年の年末年始に特番やら1期全話再放送とか、いろいろあるみたいなので、見てみるといいんじゃないかな、と思います。アニメ1期はとくにヤバいので、おすすめです。(萌えアニメじゃないよ、ギャグアニメだよ！)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://milky-holmes-anime.com/news/alt_one-two.html&quot;&gt;年末年始のTVアニメ「探偵オペラ ミルキィホームズ」放送情報！&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>脅迫に屈するのはダメだと思うんだ</title>
   <link href="http://tsucchi.github.com//anime/2012/12/07/kurobas"/>
   <updated>2012-12-07T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//anime/2012/12/07/kurobas</id>
   <content type="html">&lt;p&gt;まあ自分は、コミケも黒バスもどうでもいいし、政治的な話はあんましないようにしてるんですが、&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.comiket.co.jp/info-a/C83/C83Notice1.html&quot;&gt;コミックマーケット８３における『黒子のバスケ』サークル・頒布物対応に関する緊急のお知らせ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;しかしながら、11月21日に他主催による『黒子のバスケ』オンリー同人誌即売会の中止、11月22日に「ジャンプフェスタ」における『黒子のバスケ』関連イベントの中止が発表される事態を受けて、会場より、犯人が捕まるまでコミケットの開催を見合わせるか、あるいは、『黒子のバスケ』サークルに参加を見合わせてもらった上で開催するよう、1996年からの会場利用においても、前例のない非常に強い要請を受けることになりました。また、警察からも、『黒子のバスケ』サークルの参加見合わせとコミックマーケット８３における『黒子のバスケ』の同人誌・グッズ等の頒布を中止するよう、非常に強い要請を受けております。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「何やってんだ、ダメダメ警察！」(CV:徳井青空)とか茶化してもいいんだけど、やっぱコレまずいよ。
警察が要請しちゃダメだと思うんだ。SAT でも自衛隊でも何でも投入してでも開催して、あわよくば犯人捕まえないと。(投入する戦力はイベントの重要度によるけど、コミケは数十万単位の動員があるから、そのくらいやってもいいと思うんだ。)&lt;/p&gt;

&lt;p&gt;警察の中の人たちは、これが文化の危機だって、ちゃんと認識してるんだろうか。僕は黒バスはどうでもいいし、
コミケも別にどうでもいいけど、たとえばミルキィホームズで同じことされたら、って思ったらすごく怖くなった。&lt;/p&gt;

&lt;p&gt;ガンダムで、エヴァンゲリオンで、まどか☆マギカで、同じことされて、本当に脅迫に屈して自粛するの？&lt;/p&gt;

&lt;p&gt;今、衆議院の選挙運動してるけど、候補者が脅迫されたらどうすんの？&lt;/p&gt;

&lt;p&gt;脅迫は全力で叩き潰さないと、「オレが気に入らないものは、脅迫して潰す」ってのが正当化されちゃう世の中になっちゃうよ。それはまずいよ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E5%BD%BC%E3%82%89%E3%81%8C%E6%9C%80%E5%88%9D%E5%85%B1%E7%94%A3%E4%B8%BB%E7%BE%A9%E8%80%85%E3%82%92%E6%94%BB%E6%92%83%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D&quot;&gt;彼らが最初共産主義者を攻撃したとき&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ナチ党が共産主義を攻撃したとき、私は自分が多少不安だったが、共産主義者でなかったから何もしなかった。ついでナチ党は社会主義者を攻撃した。私は前よりも不安だったが、社会主義者ではなかったから何もしなかった。ついで学校が、新聞が、ユダヤ人等々が攻撃された。私はずっと不安だったが、まだ何もしなかった。ナチ党はついに教会を攻撃した。私は牧師だったから行動した―しかし、それは遅すぎた。
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>近況あるいは、奇跡も、魔法も、あるんだよって話</title>
   <link href="http://tsucchi.github.com//misc/2012/11/20/zatsudan"/>
   <updated>2012-11-20T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//misc/2012/11/20/zatsudan</id>
   <content type="html">&lt;p&gt;相変わらず、コード書かない日々を送っております。
まあどういう状況にいるかは、超勘のいい人なら分かるかもしれないし、説明する気もあんまりないし、って感じですかね。&lt;/p&gt;

&lt;p&gt;さて、僕は、(冗談ではなくマジで)、プログラマは現代の魔法使いだと思っています。&lt;/p&gt;

&lt;p&gt;だって普通の人が何日もかけてやる仕事を一瞬で終わらせたり、世界中のつぶやきからミルキィホームズ関連の発言だけかき集めたりとか、
(暇ができたらそういう bot つくろうかなー、ってちょっと思ってる)、そういうことできるわけですから。&lt;/p&gt;

&lt;p&gt;その上で、僕は、「僕の魔法で少しでも世の中を良くしたい」って、結構マジに思っていたりします。&lt;/p&gt;

&lt;p&gt;なので、魔法を封じられてる現状はかなり辛いです。それから、ウチの会社は僕の魔法を必要としてるのか、そうじゃないのか、
その辺も悩みだったり。わがままは承知の上なのだけど、「僕の」魔法じゃなきゃ嫌なんですよ。もうちょっと年取ったら若いもんに
任せたりするようになるのかもしれませんが。&lt;/p&gt;

&lt;p&gt;と、言うわけで、結構滅入っているのです。あー、早く終わんないかなー。。。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>近況あるいは、こんなの絶対おかしいよ、という話</title>
   <link href="http://tsucchi.github.com//misc/2012/11/17/zatsudan"/>
   <updated>2012-11-17T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//misc/2012/11/17/zatsudan</id>
   <content type="html">&lt;p&gt;ここ2週間くらい、コード書いてないです。DB も触ってないし、仕様検討とかアーキテクチャやってるわけでもないです。&lt;/p&gt;

&lt;p&gt;全然何も生産してないです。でも超忙しいんです。
ってかオレが離脱してる関係で、うちのチームの生産力がめっちゃ下がってるんだけどいいのかな？
別にいいんだよね？
(普段は DB とバックエンドの Web-API をオイラ一人で面倒見てるから、まあそんなもんだよね)&lt;/p&gt;

&lt;p&gt;油断してると、ちょっとウツっぽくなってるので気をつけないといかんなー。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Excel でグレースケールの印刷プレビューをする</title>
   <link href="http://tsucchi.github.com//excel/2012/11/09/excel_grayscale_print"/>
   <updated>2012-11-09T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//excel/2012/11/09/excel_grayscale_print</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://twilog.org/tsucchi/date-121108&quot;&gt;このへんの一連の tweet&lt;/a&gt;を見てた人は見なくてもいい話かも。&lt;/p&gt;

&lt;p&gt;表題のことを &lt;a href=&quot;http://twitter.com/tsucchi/status/266415319785033728&quot;&gt;twitter でつぶやいた&lt;/a&gt;んだけど、全然反響なくて、どうしよー、とか思ってたら
結構あっさり自己解決したのでメモ。&lt;/p&gt;

&lt;p&gt;なんかググってみると、白黒とグレースケールを混同してるひどい話(Excel の白黒って、グレースケールじゃなくて、ほんとに白と黒だけなんですよ。。。オートシェイプが真っ白になっちゃうw)や、「Word から PDF 変換したときにオートシェイプの色がカラーのままになってしまう、Excel だと大丈夫だけど。。。」って、それ Excel でも発生するんですが、それどうすればすればええねん？？？オレもこまってるんだけど。。。&lt;/p&gt;

&lt;p&gt;みたいな話などなど、全然役に立たない話ばっかりで orz な思いをしました。&lt;/p&gt;

&lt;p&gt;MS 純正の Document Image Writer という仮想プリンタがあります(何するとインストールされるのか、よく分からないのですが)。こいつに印刷を食わせると、
白黒の tif イメージファイルが出力されます。ただ、最高で 300dpi までしか出せないので、実際の印刷(レーザープリンタだと最低で 600dpi くらい
らしいです)と比べると、明らかにクォリティが低い物体が出力されてしまいます。&lt;/p&gt;

&lt;p&gt;ですが、この Document Image Writer をプリンタに選んだ状態で、印刷プレビューすると、ちゃんとグレースケールのプレビューを見ることができます。
これだと、出力時の微妙な解像度(max 300dpi)ではなく、普通の印刷プレビューの解像度で見ることができます。&lt;/p&gt;

&lt;p&gt;と、いうわけで、Document Image Writer を選んで普通に印刷プレビューをするのが正解っぽいです。&lt;/p&gt;

&lt;p&gt;なお、僕が使ってるのは Excel 2003 なので、新しいバージョンだと違うかも、です。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Kappa の飼い方(Kappa という ORM の話) その8 雑多な話</title>
   <link href="http://tsucchi.github.com//kappa/2012/10/23/kappa_misc"/>
   <updated>2012-10-23T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//kappa/2012/10/23/kappa_misc</id>
   <content type="html">&lt;p&gt;こんばんはこんばんは。YAPC が終わって、そろそろ1ヶ月になるんですね。。。
YAPC の直前くらいに書き始めた本連載も今回が最終回です。&lt;/p&gt;

&lt;p&gt;僕が作っている&lt;a href=&quot;https://github.com/tsucchi/p5-Kappa&quot;&gt;Kappa&lt;/a&gt; という ORM の話。
今日は雑多な話です。スピリチュアルです。コードもありません。&lt;/p&gt;

&lt;h2&gt;目次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/15/kappa_background&quot;&gt;その1 開発の背景のお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/17/kappa_install&quot;&gt;その2 インストールとかのお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/22/kappa_basic_operation&quot;&gt;その3 基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/25/kappa_select_and_rowobject&quot;&gt;その4 select 系いろいろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/02/kappa_row_object&quot;&gt;その5 Row オブジェクトの基本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/09/kappa_customized_row_object&quot;&gt;その6 Row オブジェクトのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/10/kappa_table_class&quot;&gt;その7 テーブルクラスとそのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/23/kappa_misc&quot;&gt;その8 雑多な話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;設計思想みたいな話&lt;/h2&gt;

&lt;p&gt;僕はアプリケーションというものは、当該業務を写す鏡のようなものである、と考えています。&lt;/p&gt;

&lt;p&gt;運用がぐちゃぐちゃな部分はアプリもぐちゃぐちゃになって、「あちゃー」という思いをすることもあるし、逆に、
アプリ作ってみて、「この業務はこういう風になってたのか」と感心することもあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/kappa/2012/09/15/kappa_background&quot;&gt;その1&lt;/a&gt;で紹介したいくつかの僕の blog 記事でさんざんストアドプロシージャを
dis っているのは、ストアドの記述力だと、よほど上手に組まないと、「業務を写す鏡」までたどり着かず、
似たようなロジックなのに共通化できないとか、そもそもただのループ回すにも一苦労とか、項目追加するだけなのに、
書き換えるところ多すぎとか、そういうことに何度も直面してきたからです。&lt;/p&gt;

&lt;p&gt;Kappa では、ロジックはすべてテーブルクラス(と Row オブジェクト)に置かれることになります。テーブルクラスでロジックを
作り込めば作り込むほど、全体のモデルが賢くなるように出来ています。(もちろん、ちゃんとクラス階層を作らないとダメですよ)&lt;/p&gt;

&lt;h2&gt;機能の話&lt;/h2&gt;

&lt;p&gt;基本的に、Kappa 本体では、テーブルクラスと Row オブジェクトの処理以外はしないつもりです。(最近カスタマイズ可能なイテレータを
付けたのですが、これをどうしようか、かなり悩んでいます。将来消しちゃうかもしれません。)&lt;/p&gt;

&lt;p&gt;トランザクション管理とか、コネクション管理とか、その辺は ORM で持つ方がいいかな、という気もしなくもないのですが、
DBI の上に一枚なにかかぶせて、なんとかするのを今検討しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/db/2012/10/04/dbix_decorator&quot;&gt;DBIx::Decorator ってのを書いてみたら、色々ダメさ加減が分かった話&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まだ成果は出ていないんですけどね。。。&lt;/p&gt;

&lt;p&gt;今、プロジェクトの親クラス(今まで説明してきた例でいうと、MilkyHolmes::DB とか MilkyHolmes::DB::Table)あたりに置いてる物体で、
汎用っぽいものが見えてくれば、将来コアに追加されるかもしれませんが、今の所、そういうものは見えていません。&lt;/p&gt;

&lt;h2&gt;プラグイン&lt;/h2&gt;

&lt;p&gt;基本的に、プラグイン機能は考えていません。プロジェクトの親クラスにメソッド置けば十分ではないか、と考えています。先行者の Teng も
プラグインあんまり出回ってませんしね。。。&lt;/p&gt;

&lt;p&gt;(SQL::Maker を内部で使っているので、)SQL::Maker のプラグインでいい感じのものが増えてきたら、
SQL::Maker のプラグインを簡単に組み込める機能とか付けるかもしれません。&lt;/p&gt;

&lt;h2&gt;スキーマ定義の話&lt;/h2&gt;

&lt;p&gt;もともとスキーマレスで使えることを志向しているので、スキーマクラスとか無いのですが、テーブルクラスにスキーマ上の PK とかを
定義するときは、正規の方法を提供してあげるほうがいいのかな、とかちょっと思っています。(今、僕のプロジェクトで ::DB::Table に置いてる
シンタックスはひどすぎるので、別のものを考えてみるつもりです)。これができると、INSERT して SELECT して Row オブジェクト返したりとかできる
ようになるので、ちょっとだけ嬉しいかな、と思っています。&lt;/p&gt;

&lt;h2&gt;今後の話&lt;/h2&gt;

&lt;p&gt;今のところ、機能的にはあんまり困っていません。が、別のプロジェクトで使ってみると、バグが見つかったり、欲しい機能が出てきたりするので、
いろいろな所で使ってみようと思っています。&lt;/p&gt;

&lt;p&gt;あと、内部で、SQL 実行エンジンとして使っている SQL::Executor というモジュール(これも僕が作ったやつ)が出すエラーメッセージがひどすぎるので、
それは改善したいな、と思っています。&lt;/p&gt;

&lt;h2&gt;互換性の話&lt;/h2&gt;

&lt;p&gt;今、ふつうに業務で使っているので、激しく非互換にすることは無いとは思いますが、自分の中ではまだまだベータ版だよなー、と思っています。
なので、非互換な変更が将来入るかもしれません。&lt;/p&gt;

&lt;h2&gt;CPAN にあげる？&lt;/h2&gt;

&lt;p&gt;将来、設計がだいぶ安定して、使ってる人が出てきたりしたら CPAN に上げるかもしれませんが、今のところそのつもりは無いです。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回は雑談なので、まとめ、といいつつ、まとめるような話はありません。連載は今回でおしまいにするつもりですが、今後も何か機能追加やバグフィックス
などあれば、随時記事は書いていきたいと思います。&lt;/p&gt;

&lt;p&gt;Kappa に関して、なにかリクエストや疑問や文句などあれば、twitter(@tsucchi) とかこのブログのコメント欄(使ったこと無いから使えるか分らんけど)とか、
はてブとか、その辺で連絡してみてください。要望とかバグなどあれば、@tsucchi か github issue(日本語でいいです。ってか日本語のがいいです)まで。&lt;/p&gt;

&lt;p&gt;ではでは。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>年齢++</title>
   <link href="http://tsucchi.github.com//misc/2012/10/22/age_plus_plus"/>
   <updated>2012-10-22T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//misc/2012/10/22/age_plus_plus</id>
   <content type="html">&lt;p&gt;まあ前にも書いたけど、来年で定年(笑)をむかえるわけです。&lt;/p&gt;

&lt;p&gt;「(笑)」とか書いてるけど、まあこのくらいの年になると、ぶっちゃけあんま笑えないわけです。&lt;/p&gt;

&lt;p&gt;最後(?)だから、沢山コード書いて、その上で身の振り方を考えていけばいいのかなー、と思っております。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>mod_perl 環境でも Data::Section::Simple 使えるかも</title>
   <link href="http://tsucchi.github.com//mod_perl/2012/10/19/mod_perl_and_data_section"/>
   <updated>2012-10-19T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//mod_perl/2012/10/19/mod_perl_and_data_section</id>
   <content type="html">&lt;p&gt;※まだ結論出きっていないので、間違いあるかもです。おかしなところあれば、ご指摘いただければ幸いです。&lt;/p&gt;

&lt;p&gt;一般に、Apache::Registry/PerlRun などの、「速い CGI 環境」としての mod_perl 環境(うー、この言い回しめんどくさいけど、使わざるを得ない)
では、__DATA__ ファイルハンドルが使えません。&lt;/p&gt;

&lt;p&gt;なので、Data::Section::Simple とかの、__DATA__ を読むモジュールも使えません。&lt;/p&gt;

&lt;p&gt;と、いうことを&lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;YAPC のトーク&lt;/a&gt;で、ちょっと触れたら、&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mod_perl_info/status/253426068847984640&quot;&gt;@mod_perl_info&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;あ、どうすればRegistry/PerlRun環境下で__DATA__が使えるかといった話は @tsucchi さんの先日のYAPCでのスライド http://www.slideshare.net/tsucchi/perlsql/32 … から触発されました。 https://twitter.com/mod_perl_info/status/253424577147973634 … 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか、&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/aloelight/status/253526345777311744&quot;&gt;@aloelight&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.@tsucchi @xtetsuji ModPerl::Registryしか試してませんが，DATAを読み込めるようにしました．お暇な時にお試しください &amp;gt; p5-apache2-data-section-simple GitHub http://bit.ly/SF5WYg  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか、そんな話が出てきまして、僕のユースケースだと、&lt;a href=&quot;https://github.com/ysasaki/p5-apache2-data-section-simple&quot;&gt;あろえさんのやつ&lt;/a&gt;で大体いけそうなだけど、今度はテストコードで困るなぁ、とか思ったりしました。&lt;/p&gt;

&lt;p&gt;で、じゃあ $ENV{MOD_PERL}とか見て、素の Data::Section::Simple つかうやつと、あろえさんの Apache2::Data::Section::Simple を切り替える物体とか作るかなー、とか思って、コードとかドキュメントとか読んでたら、Data::Section::Simple って、OO のインターフェース持ってて、パッケージ名を渡せるみたいなんですよね。&lt;/p&gt;

&lt;p&gt;Registry/PerlRun 環境って、パッケージとか、ファイルパスとかがいつもと違うから、色々おかしくなるんだけど、Data::Section::Simple のコードをみる限り、OO I/F を使えば、その辺の問題がクリアできそうに思えました。&lt;/p&gt;

&lt;p&gt;で、僕が使いたいポイントは、ORM のモデルクラス(正確にいうと、自作 ORM の Kappa のテーブルクラス)なので、基本的にパッケージ名は ref $self すれば取れます。(main パッケージじゃないので、__PACKAGE__ で取っても大丈夫そうだけど、ちょっと自信ない)。&lt;/p&gt;

&lt;p&gt;あとは、ここで取ったパッケージ名を渡したときに、__DATA__ が読めてくれれば良いので、↓みたいな簡単なモデルと、テストプログラムを書いて、
軽く実験した感じだと、ちゃんと動いた。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::DB::Table::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(MilkyHolmes::DB::Table)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data::Section::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test_data_section_simple&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pkg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data::Section::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Simple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pkg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_data_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;test_sql&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;bp&quot;&gt;__DATA__&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;test_sql&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detective&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;一応何度か F5 連打しても動いていたので、多分キャッシュされた状態でもちゃんと動くと思う。週明けにがっつり実験してみようと思っています。&lt;/p&gt;

&lt;h3&gt;(10/22 追記)&lt;/h3&gt;

&lt;p&gt;結局がっつりやってないのですが、コンパイル済みの状態(かどうかは、見た目じゃわかんないから、コンパイル済み、と思われる状態)で動いた(もう一回実験してみた)ので、多分大丈夫でしょう！&lt;/p&gt;

&lt;h2&gt;結論&lt;/h2&gt;

&lt;p&gt;まだ自信ないけど、「mod_perl 環境では、__DATA__が使えない」というのはかなり不正確な言い方で、「ある種の制限があるよ」くらいが妥当な気がしてきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;少なくとも、mod_perl の制限ではなく、Registry/PerlRun の制限らしい&lt;/li&gt;
&lt;li&gt;パッケージ名がうまく解決できていないとうまくいかないけど、そこをクリアすれば何とかなるっぽい&lt;/li&gt;
&lt;li&gt;素の __DATA__ を読むのは多分しんどい。Data::Section::Simple の読み方ならいける&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ってな感じの結論なんですが、やっぱり自信ないので、識者の方フォローしていただけると嬉しいです&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Kappa の飼い方(Kappa という ORM の話) その7 テーブルクラスとそのカスタマイズ</title>
   <link href="http://tsucchi.github.com//kappa/2012/10/10/kappa_table_class"/>
   <updated>2012-10-10T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//kappa/2012/10/10/kappa_table_class</id>
   <content type="html">&lt;p&gt;こんばんはこんばんは。YAPC も(ry もういいか。ずいぶん経つもんね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tsucchi/p5-Kappa&quot;&gt;Kappa&lt;/a&gt; という ORM の話。
今日はテーブルクラスとそのカスタマイズ方法についてです。&lt;/p&gt;

&lt;h2&gt;目次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/15/kappa_background&quot;&gt;その1 開発の背景のお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/17/kappa_install&quot;&gt;その2 インストールとかのお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/22/kappa_basic_operation&quot;&gt;その3 基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/25/kappa_select_and_rowobject&quot;&gt;その4 select 系いろいろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/02/kappa_row_object&quot;&gt;その5 Row オブジェクトの基本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/09/kappa_customized_row_object&quot;&gt;その6 Row オブジェクトのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/10/kappa_table_class&quot;&gt;その7 テーブルクラスとそのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/23/kappa_misc&quot;&gt;その8 雑多な話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;事前準備&lt;/h2&gt;

&lt;p&gt;前回と同じものを使います。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dbi:SQLite:dbname=:memory:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CREATE TABLE detective (&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  id      INT PRIMARY KEY,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  toys_id INT, /* toys.id */&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  name    TEXT&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CREATE TABLE toys (&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  id    INT PRIMARY KEY,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  name  TEXT&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;スキーマは分かりますよね？ detective.toys_id = toys.id で結合します。(前回と同じ)&lt;/p&gt;

&lt;p&gt;メモリ上にテーブルを作っているため、前回入れた人もデータを入れる必要があります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row_namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;MilkyHolmes::DB::Row&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;toys&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;サイコキネシス&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;toys&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ダイレクトハック&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;toys&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;トライアセンド&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;toys&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ハイパーセンシティブ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toys_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toys_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;譲崎　ネロ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toys_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;エルキュール・バートン&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toys_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;コーデリア・グラウカ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ここより後ろに試したいコードを書きます&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;テーブルクラスって何？&lt;/h2&gt;

&lt;p&gt;Kappa には model() というメソッドがあります。これを呼ぶと、テーブルクラスのインスタンスが返ります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$model_detective&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#detective テーブルのテーブルクラスのインスタンスが返る&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;テーブルクラスはデフォルトのインスタンス(ここでは $db)とほとんど同じですが、自分自身のテーブル名を知っているため、
select/insert/update などの各メソッドを使う際に、テーブル名を省略できるようになります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toys_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;undef&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# トイズがなくなってダメダメにw&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;また、テーブルごとにカスタマイズしたメソッドを持てるようになります。&lt;/p&gt;

&lt;p&gt;あと、以前 Row オブジェクトの説明で、Row オブジェクトの db() は Kappa のインスタンスと大体同じ、と説明しましたが、
厳密には、この model() メソッドで取り出したインスタンスと同じです。Row オブジェクトは(たいてい)テーブル名を知っている
ため、そのようになっています。&lt;/p&gt;

&lt;h2&gt;カスタマイズ方法&lt;/h2&gt;

&lt;p&gt;ではテーブルクラスのカスタマイズをします。プロジェクトは前回同様 MilkyHolmes を使います。detective テーブルをカスタマイズ
します。&lt;/p&gt;

&lt;p&gt;ファイル名でいうと、lib/MilkyHolmes/DB/Table/detective.pm。 パッケージ名でいうと、MilkyHolmes::DB::Table::detective となります。&lt;/p&gt;

&lt;p&gt;前回と似てますが、detective.id を引数にとって、toys.name (トイズの名前)を返す、toys_name_from_detective_id という
メソッドをつけてみましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::DB::Table::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(Kappa)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toys_name_from_detective_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#detective テーブルはテーブル名を省略できる。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toys_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# 前回作った toys_name を呼ぶ&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;テーブルクラス内では、拡張しているテーブル自身(今回の例では detective)を省略することができます。
つまりテーブルクラス定義内の $self は Kappa のインスタンスではなく、$db-&gt;model('テーブル名') したものに
なります。&lt;/p&gt;

&lt;h2&gt;カスタマイズしたテーブルクラスの使い方&lt;/h2&gt;

&lt;p&gt;Row オブジェクトの場合と同様、このままでは、定義したテーブルクラスを使うことができません。
Kappa に テーブルクラスの定義がどこに置いてあるかを教えてあげる
必要があります。Kappa の new にオプションとして table_namespace というオプションをわたします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# コンストラクタで table_namespace を指定&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;row_namespace&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;MilkyHolmes::DB::Row&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#これは前回していしたやつ&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;table_namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;MilkyHolmes::DB::Table&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#テーブルクラスの定義場所を指定&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;こうすることで、テーブルクラスの定義が 「MilkyHolmes::DB::Table::テーブル名」 にあることが Kappa さんに伝わります。
これにより、カスタマイズしたメソッドが呼べるようになります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toys_name_from_detective_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;#39;サイコキネシス&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;共通のメソッドをテーブルクラスに定義したい&lt;/h2&gt;

&lt;p&gt;テーブルに依存せず、すべてのテーブルクラスに共通の処理を定義したい場合もあるかと思います。
Row オブジェクトの場合と同じように、Kappa は テーブルクラスの定義を、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「table_namespace::テーブル名」 で定義された、テーブル名単位のもの&lt;/li&gt;
&lt;li&gt;table_namespace&lt;/li&gt;
&lt;li&gt;Kappa (基本機能)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;の順に検索します。ですので、共通処理は table_namespace におきます。今回の例だと、
MilkyHolmes::DB::Table(ファイル名だと lib/MilkyHolmes/DB/Table.pm )におきます。&lt;/p&gt;

&lt;p&gt;たとえば、insert したあとに、id を返す insert_and_last_insert_id を実装してみます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::DB::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(Kappa)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert_and_last_insert_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#移植性がないのが微妙ですね。。。laset_insert_id 使っても微妙だし。。。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlite_last_insert_rowid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;カスタマイズしたテーブルクラス(detective テーブルのもの)からも使えるように、親クラスを変更しておきます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::DB::Table::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(MilkyHolmes::DB::Table)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#親クラスを変更&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...以降は前と同じ&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;ただし、table_namespace に定義した場合、Kappa のインスタンスからは利用できないので、かなり微妙です。
ですので、共通機能は、もう一つ上の、「プロジェクト名::DB」に置くことの方が多いです。(この例では MilkyHolmes::DB)。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(Kappa)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# MilkyHolmes::DB::Table から移動&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert_and_last_insert_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#移植性がないのが微妙ですね。。。laset_insert_id 使っても微妙だし。。。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlite_last_insert_rowid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;で、table_namespace のほうは、この拡張したクラスを継承するようにします。こんな感じ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::DB::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(MilkyHolmes::DB)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# 親クラス変更&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;で、インスタンス化する対象を Kappa のインスタンスではなく、「プロジェクト名::DB」のインスタンスにします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 前は Kappa を new してたところ&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;row_namespace&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;MilkyHolmes::DB::Row&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#これは前回していしたやつ&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;table_namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;MilkyHolmes::DB::Table&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#テーブルクラスの定義場所を指定&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;また、都度 row_namespace や table_namespace を指定するのはだるいので、コンストラクタをオーバーライドするのが
おすすめです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(Kappa)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$option_href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$option_href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;MilkyHolmes::DB::Row&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$option_href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;MilkyHolmes::DB::Table&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;SUPER::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$option_href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;bless&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;こうすると、先ほどの呼び出しは、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 前は Kappa を new してたところ&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;とシンプルに書けるようになります。&lt;/p&gt;

&lt;h2&gt;なぜテーブルクラスが重要か&lt;/h2&gt;

&lt;p&gt;テーブルクラス内では、自分自身のテーブル名を省略できる、というのが最大のポイントです。&lt;/p&gt;

&lt;p&gt;テーブル名が省略されていない呼び出しを見つけると、「あれ？この部分はメソッドに切り出して、
省略できるように他のクラスに移動した方がいいんじゃないかな？」と思うようになります。
(そして、その移動したメソッドは他のクラスからも再利用できるかもしれない、ってか出来ることが多い)&lt;/p&gt;

&lt;p&gt;DB設計の時点でミスるとダメかもしれませんが、基本的には、テーブル名を省略できるように書いていくだけで、
ある程度キレイな API が作れるようになっています。(Row オブジェクトを上手に作っても多分実現できるのですが、
テーブルクラスでやるほうがずっと簡単です。)&lt;/p&gt;

&lt;p&gt;ですので、Kappa においては、Row オブジェクトよりもテーブルクラスのほうが重要な訳です。&lt;/p&gt;

&lt;h2&gt;サンプル&lt;/h2&gt;

&lt;p&gt;今回も&lt;a href=&quot;https://github.com/tsucchi/Kappa-Example/zipball/2012-10-10-kappa_table_class-rev02&quot;&gt;動作するサンプル&lt;/a&gt;を作成しました。
bin ディレクトリの customized_table_class.pl が今回のサンプルです。lib/MilkyHolmes/ 配下も実装してありますので、確認してみてください。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回はテーブルクラスと、そのカスタマイズ方法を解説しました。これで伝わってるのかだいぶ微妙なのですが、
もうちょっと書いていこうと思います。次回は雑多な話をしようかな。多分最終回です。&lt;/p&gt;

&lt;p&gt;なにかリクエストや疑問や文句などあれば、twitter(@tsucchi) とかこのブログのコメント欄(使ったこと無いから使えるか分らんけど)とか、はてブとか、
その辺で連絡してみてください。Kappa 自体の要望とかバグなどあれば、@tsucchi か github issue(日本語でいいです。ってか日本語のがいいです)まで。&lt;/p&gt;

&lt;p&gt;ではでは。また次回。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Kappa の飼い方(Kappa という ORM の話) その6 Row オブジェクトのカスタマイズ</title>
   <link href="http://tsucchi.github.com//kappa/2012/10/09/kappa_customized_row_object"/>
   <updated>2012-10-09T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//kappa/2012/10/09/kappa_customized_row_object</id>
   <content type="html">&lt;p&gt;こんばんはこんばんは。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yapcasia.org/2012/&quot;&gt;YAPC::Asia&lt;/a&gt;も無事に終了しましたねー。&lt;/p&gt;

&lt;p&gt;さて、YAPC でお話させていただいた、 &lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;Perl と SQL のいろいろ&lt;/a&gt;
は公式サイトにプレゼン資料・動画ともどもアップされております！見たかったけど見逃した方はチェックすべし！(自分は恥ずかしくて動画みてないけどな！)&lt;/p&gt;

&lt;p&gt;(※ここまでテンプレ)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tsucchi/p5-Kappa&quot;&gt;Kappa&lt;/a&gt; という ORM の話。今日は Row オブジェクトのカスタマイズについてです。&lt;/p&gt;

&lt;h2&gt;目次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/15/kappa_background&quot;&gt;その1 開発の背景のお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/17/kappa_install&quot;&gt;その2 インストールとかのお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/22/kappa_basic_operation&quot;&gt;その3 基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/25/kappa_select_and_rowobject&quot;&gt;その4 select 系いろいろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/02/kappa_row_object&quot;&gt;その5 Row オブジェクトの基本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/09/kappa_customized_row_object&quot;&gt;その6 Row オブジェクトのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/10/kappa_table_class&quot;&gt;その7 テーブルクラスとそのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/23/kappa_misc&quot;&gt;その8 雑多な話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;事前準備&lt;/h2&gt;

&lt;p&gt;テーブルを作っておきましょう。そういえば、SQLite には memory というエンジンがあります。(ファイル名を「:memory:」とする。)
終了時にデータが勝手に消えてくれるので、テストとかお試し用ならこっちのほうがいいかもしれませんね。&lt;/p&gt;

&lt;p&gt;今回は2テーブル作ります。なお、設定上、1探偵1トイズという制限は無いと思われる(複数持っても良いと思われる)
のですが、説明が面倒くさくなるので細かいことは気にしないで。&lt;/p&gt;

&lt;p&gt;あ、ちなみに、トイズっていうのは、探偵(または怪盗)が持っているある種の超能力のことです。今回は名称のみデータとして持つことにします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dbi:SQLite:dbname=:memory:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CREATE TABLE detective (&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  id      INT PRIMARY KEY,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  toys_id INT, /* toys.id */&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  name    TEXT&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CREATE TABLE toys (&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  id    INT PRIMARY KEY,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  name  TEXT&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;スキーマは分かりますよね？ detective.toys_id = toys.id で結合します。&lt;/p&gt;

&lt;p&gt;データも入れましょう。今回からテーブル構造変わった上、メモリ上にテーブルを作っているため、
前回入れた人もデータを入れる必要があります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;toys&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;サイコキネシス&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;toys&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ダイレクトハック&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;toys&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;トライアセンド&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;toys&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ハイパーセンシティブ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toys_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toys_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;譲崎　ネロ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toys_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;エルキュール・バートン&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toys_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;コーデリア・グラウカ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ここより後ろに試したいコードを書きます&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Row オブジェクトのカスタマイズの前に&lt;/h2&gt;

&lt;p&gt;アプリを作成する場合、どのようなソフトウェア構成にしていますか？&lt;/p&gt;

&lt;p&gt;Web アプリでフレームワークを使っている場合は、フレームワークの規約にしたがうのが良いでしょう。
そうでない場合は、CPAN モジュールと同じレイアウトにしておくのがおすすめです。(なお、Web Application Framework を使う
場合も、大抵の場合 CPAN レイアウトになっているはずです。)&lt;/p&gt;

&lt;p&gt;CPAN レイアウトを作るには、pmsetup とか Module::Starter とか Module::Setup とかそのへんのツールを使えば簡単にできます。
僕は Module::Setup を使っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://perl-users.jp/articles/advent-calendar/2009/hacker/19.html&quot;&gt;Module::Setup でらくらくモジュール作成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;さて、CPAN レイアウトを取っていると、プロジェクト(アプリケーション)で使うライブラリは lib というディレクトリに入れているかと
思います。カスタマイズした、Row オブジェクトも lib 配下に置くことになります。&lt;/p&gt;

&lt;p&gt;Row オブジェクトの命名規則は、たとえばプロジェクト名が MyProj だとしたら、「MyProj::DB::Row::テーブル名」 みたいな感じにすると分かりやすくて
よいのではないか、と思います。命名規則は、いつかまた解説すると思います。&lt;/p&gt;

&lt;h2&gt;カスタマイズ方法&lt;/h2&gt;

&lt;p&gt;では実際に Row オブジェクトのカスタマイズをします。プロジェクト名は仮に MilkyHolmes としておきましょうか。detective テーブルの Row オブジェクト
を拡張します。&lt;/p&gt;

&lt;p&gt;ファイル名でいうと、lib/MilkyHolmes/DB/Row/detective.pm。 パッケージ名でいうと、MilkyHolmes::DB::Row::detective となります。お気に入りの開発ツール
(僕は emacs を使っています)で、ファイルを開きましょう。&lt;/p&gt;

&lt;p&gt;Kappa は FK とかをみて、つながっているテーブルのデータを引っ張る機能とかが&lt;strong&gt;ありません&lt;/strong&gt;。(まあ今回の例では FK 張ってませんが)
ですので、Row オブジェクトを拡張して、detective の Row オブジェクトから toys の name(トイズの名前)を引く、
toys_name というメソッドを付けてみましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::DB::Row::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(Kappa::Row)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toys_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toys_row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;toys&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toys_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toys_row&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toys_row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Row オブジェクトの db メソッドを呼ぶと、Kappa (呼び出し元)のオブジェクトが取れるのでした。
これを用いて、toys テーブルの行を取得し、toys.name の値を返しています。(なお、Kappa には透過キャッシュとかないので、
処理が重くなったり、重そうだったら必要に応じてキャッシュを入れる必要があります。)&lt;/p&gt;

&lt;h2&gt;カスタマイズした Row オブジェクトの使い方&lt;/h2&gt;

&lt;p&gt;このままでは、定義した Row オブジェクトを使うことができません。Kappa に Row オブジェクトがどこにあるかを教えてあげる
必要があります。Kappa の new にオプションとして、row_namespace というオプションをわたします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# コンストラクタで row_namespace を指定&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row_namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;MilkyHolmes::DB::Row&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;こうすることで、Row オブジェクトの定義が 「MilkyHolmes::DB::Row::テーブル名」 にあることが Kappa さんに伝わります。&lt;/p&gt;

&lt;h2&gt;共通の Row オブジェクト&lt;/h2&gt;

&lt;p&gt;テーブルに依存せず、すべての Row オブジェクトに共通の処理を定義したい場合もあるかと思います。
Kappa は Row オブジェクトの定義を、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「row_namespace::テーブル名」 で定義された、テーブル名ごとの Row オブジェクト&lt;/li&gt;
&lt;li&gt;row_namespace&lt;/li&gt;
&lt;li&gt;Kappa::Row (基本機能)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;の順に検索します。ですので、共通処理は row_namespace におきます。今回の例だと、
MilkyHolmes::DB::Row(ファイル名だと lib/MilkyHolmes/DB/Row.pm )におきます。たとえば CSVの出力ができるような
csv_output というメソッドを付けてみましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::DB::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(Kappa::Row)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;csv_output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# これは説明用の超テキトウな実装なので、ちゃんとやるときは Text::CSV 系のモジュールを使ってください。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%row_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%row_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;カスタマイズした Row オブジェクト(detective テーブルのもの)からも使えるように、親クラスを変更しておきます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MilkyHolmes::DB::Row::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(MilkyHolmes::DB::Row)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#親クラスを変更&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...以降は前と同じ&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;サンプル&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tsucchi/Kappa-Example/zipball/2012-10-09-kappa_customized_row_object-rev02&quot;&gt;動作するサンプル&lt;/a&gt;を作成しました。
bin ディレクトリの customized_row_object.pl が今回のサンプルです。lib/MilkyHolmes/Row 配下も実装してありますので、確認してみてください。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回は Row オブジェクトのカスタマイズ方法について解説しました。次回はテーブルクラスの拡張方法について解説します。
なんとなく、読者の方が Teng とか Skinny とか使っているのを想定して、先に Row オブジェクトについて解説しましたが、
実は Kappa においては、テーブルクラスのほうが重要です。(と、僕は考えています)&lt;/p&gt;

&lt;p&gt;ではでは。また次回。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>最近何となく考えてたこととか</title>
   <link href="http://tsucchi.github.com//misc/2012/10/06/zatsudan_after_yapc"/>
   <updated>2012-10-06T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//misc/2012/10/06/zatsudan_after_yapc</id>
   <content type="html">&lt;p&gt;今日は完全に雑談です。ってか愚痴なのかも。&lt;/p&gt;

&lt;p&gt;YAPC の前後くらいからちょっとずつ意識していたことを書きます。&lt;/p&gt;

&lt;p&gt;僕は 2003 年に(今は亡き)ハードベンダー某S社に就職し、インフラエンジニアをしておりました。 2007 年に今の会社に移ってからは、アプリ屋さん兼 DBA って感じでお仕事しております。&lt;/p&gt;

&lt;p&gt;んで、ワタクシ今月で、34になりますので、プログラマ的には来年定年(笑)を迎えるわけです。&lt;/p&gt;

&lt;p&gt;「定年(笑)」とは書いたものの、あんまり笑えた状況ではなくて、やっぱりこの位の年齢になると、関連部署間の調整とかそういうの求められはじめられたりして、だんだんコードを書く時間が減ってくるわけです。&lt;/p&gt;

&lt;p&gt;で、得意な分野(僕はここ3年くらい、ずっと業務系 アプリの Web API をずっと作ってきたので、その辺の DB 設計とか API 設計とその実装)だったら、結構自信あるので、「ちょっととんがった一般人」くらいのレベルのお仕事ならできる気がするわけです。まあこの分野(+テストまわりもかな？)だったら、モヒカンにマサカリや椅子を投げられても、ギリギリ抵抗できる自信はあるわけです。&lt;/p&gt;

&lt;p&gt;その一方で、フロントまわり(リバースプロキシとか HTML とか JSとかそのへん)とか、長年遠ざかってるインフラまわり(特に AWS とかその辺のやつと、仮想化まわりとか)が全然分かってなくて、その辺に危機感を感じたりするわけです。&lt;/p&gt;

&lt;p&gt;でも会社的には、「技術だけじゃなくて。。。」みたいな話もあって、まあそれはそうなんだけど、じゃあオレが技術的な事から手を引いても大丈夫なのかよ、っていったらそんな事ない現状もあったりして。。。オレはいったいどうすればいいんですかね？&lt;/p&gt;

&lt;p&gt;とりあえず、今年いっぱいくらいの間に、Perl じゃない言語でも Perl くらい書けるようになりたいなー、とか、フロントまわりってか Web アプリちゃんと作れるようになりたいなー、とか思ってるので、その辺の修行はしようかな、と思います。あとは来年からどのくらい時間とれるか良くわかんないけど、そろそろもう一度インフラまわりに向き合わないとヤバいかなー、とか思ってたりします。&lt;/p&gt;

&lt;p&gt;そのうえで、会社的な要求と、どうすり合わせるか(あるいはすり合わせないで突っ張るのか？)とかを考えていけばいいのかなー、とか思ったり。&lt;/p&gt;

&lt;p&gt;あー、記事書いて良かったかも。書いてみると色々分かるね。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DBIx::Decorator ってのを書いてみたら、色々ダメさ加減が分かった話</title>
   <link href="http://tsucchi.github.com//db/2012/10/04/dbix_decorator"/>
   <updated>2012-10-04T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//db/2012/10/04/dbix_decorator</id>
   <content type="html">&lt;p&gt;twitter にもちょいっとつぶやいたのですが、DBI 自体をいい感じに拡張できる物体があるといいなー、と思って、
試しに書いてみた。Decorator とメソッドが生えてくる Plugin 形式と両方考えて、今回は試しに Decorator でやってみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tsucchi/p5-DBIx-Decorator&quot;&gt;p5-DBIx-Decorator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;やりたかったこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;トランザクション管理とか、コネクション管理とか、そういう機能を好きな IF を選んで拡張できたらいいな&lt;/li&gt;
&lt;li&gt;拡張するのは、DBI 自体だとうれしいな&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;とりあえず Decorator でプラグイン一個書いてみて分かったこと。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;むずい。何が正しいのかさっぱり分からん&lt;/li&gt;
&lt;li&gt;dbh を無理やり bless し直してるんだが、これちゃんと動くんだろーか？？？

&lt;ul&gt;
&lt;li&gt;そういえば普通に SQL 投げるテスト書こうと思って書いてねーや。まあ POC なんでべつにいいか。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decorator って、親とすべてのサブクラスを把握しきっていないと書きにくいなぁ

&lt;ul&gt;
&lt;li&gt;自分で全部書くなら問題ないが、誰かにプラグイン書いてもらうとか無理だね&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多分、どういう形式でやるにしても、結局他のプラグインとの相互作用が難しい。

&lt;ul&gt;
&lt;li&gt;たとえば、自動再接続したら、途中のトランザクションをロールバックするとか、そういうのどうすんだろ？&lt;/li&gt;
&lt;li&gt;そういうフックを Decorator の親に入れていくんだろうが、設計がムズそうだなー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;あまりに面倒くさいので、「オレ好みの DBI 拡張」を書く方が良いのかもしれんなー、とも思った。柔軟性ないけど。&lt;/p&gt;

&lt;h3&gt;結論&lt;/h3&gt;

&lt;p&gt;正解はひとつ！じゃない！！(There is more than one way to do it)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Kappa の飼い方(Kappa という ORM の話) その5 Row オブジェクトの基本</title>
   <link href="http://tsucchi.github.com//kappa/2012/10/02/kappa_row_object"/>
   <updated>2012-10-02T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//kappa/2012/10/02/kappa_row_object</id>
   <content type="html">&lt;p&gt;こんばんはこんばんは。
&lt;a href=&quot;http://yapcasia.org/2012/&quot;&gt;YAPC::Asia&lt;/a&gt;も無事に終了しましたねー。超楽しかった。&lt;/p&gt;

&lt;p&gt;この連載(?)は、YAPC 開催前に宣伝も兼ねて(?)書いてたのですが、間に合いませんでしたw
まあでも読者の方がちゃんといることが分ったので(こういうの超重要。すごいうれしいですよ。まじで。)
連載つづけます。&lt;/p&gt;

&lt;p&gt;YAPC でお話させていただいた、 &lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;Perl と SQL のいろいろ&lt;/a&gt;
は公式サイトにプレゼン資料もアップされております。そろそろ動画も公開されると思う(1日目のは公開されてるみたい)ので、
見たかったけど見逃した方はチェックすべし！&lt;/p&gt;

&lt;p&gt;(※ここまでテンプレ)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tsucchi/p5-Kappa&quot;&gt;Kappa&lt;/a&gt; という ORM の話。今日は select したときに返ってくる Row オブジェクトの話です。&lt;/p&gt;

&lt;h2&gt;目次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/15/kappa_background&quot;&gt;その1 開発の背景のお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/17/kappa_install&quot;&gt;その2 インストールとかのお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/22/kappa_basic_operation&quot;&gt;その3 基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/25/kappa_select_and_rowobject&quot;&gt;その4 select 系いろいろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/02/kappa_row_object&quot;&gt;その5 Row オブジェクトの基本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/09/kappa_customized_row_object&quot;&gt;その6 Row オブジェクトのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/10/kappa_table_class&quot;&gt;その7 テーブルクラスとそのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/23/kappa_misc&quot;&gt;その8 雑多な話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;事前準備&lt;/h2&gt;

&lt;p&gt;テーブルを作っておきましょう。前回 or 前々回に作ってれば作らなくていいです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dbi:SQLite:dbname=$dbfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CREATE TABLE detective (&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  id    INT PRIMARY KEY,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  name  TEXT&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;データも入れといてくださいね。(これも前回 or 前々回に入れてる人は入れなくていいです。)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;譲崎　ネロ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;エルキュール・バートン&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;コーデリア・グラウカ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;戻り値指定と Row オブジェクトの関係&lt;/h2&gt;

&lt;p&gt;前回の復習になりますが、select 系は戻り値の返り方ごとに、下記 4 タイプがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select : コンテキストに応じて 1レコード or 全レコードを返します&lt;/li&gt;
&lt;li&gt;select_row : 1レコードを返します&lt;/li&gt;
&lt;li&gt;select_all : 全レコードを返します。配列が返り、配列の1要素は、row の場合と同じです&lt;/li&gt;
&lt;li&gt;select_itr : イテレータを返します。イテレータの next() を呼ぶと、1行分データが返ります。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;つまり、Row オブジェクトは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select_row の戻り値&lt;/li&gt;
&lt;li&gt;select_all の戻り値の配列の一要素&lt;/li&gt;
&lt;li&gt;select_itr の戻り値のイテレータで、next() を呼んだときの値&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;です。ただし、一部例外があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;該当レコードがない場合&lt;/li&gt;
&lt;li&gt;row_object_enable に 0 がセットされている場合&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;該当レコードがない場合、select_row は undef, select_all は空の配列 が返ります。select_itr は 1回もイテレートできないものが返ります。
select_row 系で undef が返るのがちょっと微妙だなー、と思うのですが、もう今さら変えられないです。。。&lt;/p&gt;

&lt;p&gt;row_object_enable については、次節で紹介します。&lt;/p&gt;

&lt;h2&gt;row_object_enable&lt;/h2&gt;

&lt;p&gt;row_object_enable に 0 (FALSE になる値）をセットすると、Row オブジェクトが生成されなくなります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_object_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; { id =&amp;gt; 1, name =&amp;gt; &amp;#39;シャーロック・シェリンフォード&amp;#39;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# こんな感じの hashref が返るようになります。&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_object_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#1(TRUE)にもどすと&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 元通り Row オブジェクトが返ります&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;row_object_enable に 0 を設定すると、Row オブジェクトのかわりに hashref が返るようになります。
Row オブジェクト生成すると遅いとか、hashref のほうが取扱いしやすい場合(変数として渡ってきたキー名を使って
データを取り出したいときとか)に使うとよいです。ですが、今の状態が分からなくなると面倒なので、次節に説明する
ガード付きのやつを僕は良く使っています。&lt;/p&gt;

&lt;h2&gt;ガードつきの row_object_enable&lt;/h2&gt;

&lt;p&gt;row_object_enable の現在の状態を知る方法が、そういえばありませんw(作らなきゃダメだな)&lt;/p&gt;

&lt;p&gt;また、プログラムの途中で状態を変更してしまうと、row_object_enable の状態が意図しないものに
なってしまう可能性があります。&lt;/p&gt;

&lt;p&gt;ですので、戻り値を指定して、row_object_enable を呼ぶと、戻り値の変数のスコープを抜けたタイミングで、
以前の値に戻すようになっています。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#スコープ定義&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$guard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_object_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#ここで戻り値指定で呼ぶ&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ここでは Row オブジェクトが無効になっている&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; { id =&amp;gt; 1, name =&amp;gt; &amp;#39;シャーロック・シェリンフォード&amp;#39;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;# スコープを抜けると。。。&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# row_object_enable がデフォルト(1)に戻る&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;大変便利な機能なのですが、0.11 までのバージョンでは不具合がありましたorz&lt;/p&gt;

&lt;p&gt;今もおかしい部分もあるかもしれませんので、使ってみておかしなところを見つけた場合はご報告いただけるとありがたいです。
(twitter でも github issues でもなんでもいいです)&lt;/p&gt;

&lt;h2&gt;Row オブジェクトでできること&lt;/h2&gt;

&lt;p&gt;デフォルトの Row オブジェクトは、まずカラムの情報をとるメソッドがあります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;あとは、親のハンドルを返すメソッド(db)があります。(厳密にはちょっと違うのですが、現時点ではその違いは説明できません。)
Row オブジェクトをカスタマイズすることができるのですが、その際に使われます。(次回説明します)。&lt;/p&gt;

&lt;p&gt;呼び出し元のテーブル名を返す、table_name というのもあります。(これはあんまり使わないかも)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# $db と同じものが返る&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;#39;detective&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;また、get_columns(), row_value() というメソッドがあります。get_columns() は row_object_enable が 0 のときに返るような
hashref が返ります。row_value は hashref ではなく、hash が返ります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row_href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; { id =&amp;gt; 1, name =&amp;gt; &amp;#39;シャーロック・シェリンフォード&amp;#39; }&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%row_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; ( id =&amp;gt; 1, name =&amp;gt; &amp;#39;シャーロック・シェリンフォード&amp;#39; )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回は Row オブジェクトの基本的な機能を紹介しました。そういえば、サンプルコードの探偵さんは YAPC本編でも一部使ったのですが、
特にツッコミもなく寂しい限り(?)です。(あ、でも一瞬反応あったかな？)。&lt;/p&gt;

&lt;p&gt;次回は多分 Row オブジェクトのカスタマイズ方法について説明します。せっかくなので、探偵さんのデータも拡充しますよ！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>昨日はYAPC::Asia 2012 2日め(最終日)でした。</title>
   <link href="http://tsucchi.github.com//yapcasia/2012/09/30/yapc_day2"/>
   <updated>2012-09-30T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//yapcasia/2012/09/30/yapc_day2</id>
   <content type="html">&lt;p&gt;日付かわったので、昨日は&lt;a href=&quot;http://yapcasia.org/2012/&quot;&gt;YAPC::Asia&lt;/a&gt;の最終日でした。&lt;/p&gt;

&lt;p&gt;ワタクシの発表も無事完了いたしました。裏番組が超強力(さらに追い討ちをかけるように LTソンも gfx さんだったw)
でしたが、無事沢山の方に見ていただけたので、嬉しかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;Perl と SQL のいろいろ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;多分そのうち動画がアップされると思うので、見たかったけど見逃した方はこちら(↑)のリンクよりご覧ください。
(去年はスイーツエリアだったから録画なしだったので超嬉しい。でもちょっとはずかしい)。資料だけなら、現時点でも見れると思います。&lt;/p&gt;

&lt;p&gt;さてさて、今日はこの辺を見てきましたよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/08930a0c-b132-11e1-885d-564e6aeab6a4&quot;&gt;1台から500台までのMySQL運用(YAPC::Asia編)&lt;/a&gt;(後半のみ視聴)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/a3f896b4-b8e0-11e1-bde8-38876aeab6a4&quot;&gt;Perlでちょいモテデザインパターン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/93912060-b9b8-11e1-9336-d0be6aeab6a4&quot;&gt;CPANに恩返ししよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;Perl と SQL のいろいろ&lt;/a&gt;(じぶんのやつ)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/73dfc76c-daf6-11e1-9125-0d4e6aeab6a4&quot;&gt;シリコンバレーと世界のPerlエンジニア&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/56ce8ad8-abb6-11e1-93ce-57a46aeab6a4&quot;&gt;ウェブアプリケーション開発の現状・課題とJSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/3570fad2-d484-11e1-964b-37a36aeab6a4&quot;&gt;very simple ORMapper Teng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/3eac4714-d920-11e1-bf45-0d4e6aeab6a4&quot;&gt;モダンmod_perl入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/c9c6fcb0-dbad-11e1-bcf1-95936aeab6a4&quot;&gt;Lightning Talks Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/79991522-db79-11e1-be22-0d4e6aeab6a4&quot;&gt;How Perl Changed My Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/736d6cfc-bbf8-11e1-88ea-b39f6aeab6a4&quot;&gt;Closing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://atnd.org/event/yapc2012&quot;&gt;YAPC::Asia 2012 後夜祭&lt;/a&gt;(アンオフィシャルです)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;昨日散々 Tim Bunce, Tim Bunce って書いてたのですが、今日は Tim のセッションの時間は別のやつ見てきました。Teng と mod_perl のやつ。
どっちも面白かったので良かった。mod_perl は今まで大嫌いだったのですが、今回のトークを見て以来、無限の可能性を感じてしまって、ちょっと
おかしな感じになっています。何か作ってみようかなー、みたいな。&lt;/p&gt;

&lt;p&gt;後夜祭も楽しかったです。一日目の懇親会はぼっち気味なのに、後夜祭は何故かそうならないマジック。ってか超楽しかった。
あと、何名かの方に、「そのid 知ってる」と言っていただいたので、blog 書いたり地道に活動して良かったなー、とか思った次第。&lt;/p&gt;

&lt;p&gt;で、昨年も書いたのですが、今年も思いは変わらないのでもう一度。&lt;/p&gt;

&lt;p&gt;YAPC っていうのはハレの舞台です。超楽しい。でも、このハレの舞台の前には、穢れた日常に対して、
どれだけきっちり向かい合ってきたかが問われてるわけです。僕の例で言えば、「クソみたいな MySQL のストアドプロシージャを
どうにかしないとヤバいなー」とか、そういうことに、ここ1〜2年くらい向き合ってきた事が反映されているわけです。&lt;/p&gt;

&lt;p&gt;明日から、また穢れた日常が始まるわけですが、どれだけきっちり向き合えるかが次の1年を決めるわけです。明日からも頑張ろう、っと。&lt;/p&gt;

&lt;h4&gt;注&lt;/h4&gt;

&lt;p&gt;あ、一応フォローしとくと、MySQL のストアドプロシージャがまったくダメなわけではなくて、弊社での使い方が間違っているのでダメダメなだけです。
使いようによっては、きっと役に立つのだろう、と思います(嫌いだけど)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>YAPC::Asia 2012 発表資料「Perl と SQL のいろいろ」</title>
   <link href="http://tsucchi.github.com//yapcasia/2012/09/29/yapc_happyou"/>
   <updated>2012-09-29T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//yapcasia/2012/09/29/yapc_happyou</id>
   <content type="html">&lt;p&gt;本日お越しいただいた方、有難うございました。裏番組が超強力(メインホールに宮川さん、お隣が弾さんのうえ、LTソンで gfx さんがやってるとか、まじありえないだろwってかマジでオレ涙目ですわー)でしたが、思いのほか、沢山集まっていただいて嬉しかったです。&lt;/p&gt;

&lt;p&gt;発表資料は下記に置いておきます。アニメーションちゃんと動いてないけど、ご了承ください。ちゃんとしたやつ(LibreOffice で書いてます)が欲しい方は
私のところまでご連絡ください。(twitter なら @tsucchi ね。)&lt;/p&gt;

&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/14511986&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;http://www.slideshare.net/tsucchi/perlsql&quot; title=&quot;PerlとSQLのいろいろ&quot; target=&quot;_blank&quot;&gt;PerlとSQLのいろいろ&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/tsucchi&quot; target=&quot;_blank&quot;&gt;Takuya Tsuchida&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;あと、スライド中にも紹介した、nihen さんのトークが(はからずも)このトークの続きみたいな感じになっていて、いい感じなので一緒に見ておくと
良いかもしれません。これ =&gt; &lt;a href=&quot;http://yapcasia.org/2012/talk/show/3570fad2-d484-11e1-964b-37a36aeab6a4&quot;&gt;very simple ORMapper Teng&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;Q.A.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Q1. トランザクションのところについて。例外処理とかあまり真面目にしなくてよいのが LL の良さなので、try/catch するのはあまり良くないのでは？&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A1. 確かにその通りで、今回紹介できなかったが、トランザクション管理モジュールを使うのがお勧め(DBIx::TransactionManager など)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Q2. SQL インジェクションについて。プレースホルダを使うのは知っている人は知っている。知らない人に強制させる方法は何かないか？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A2. DBI では難しい。ORM などを使うのがよいのではないか。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Q3. SQL を (SQL::Library で)分離した際の、名前付けで注意しなければならないとのことだが、実際にどのようにつけているか？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;A3. ファイル名は SQL の FROM のテーブル名で、SQL 名は呼び出し元のメソッド名をつけています。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;毎年マサカリが飛んできて、YAPC マジ怖いですw。
来年あたりは、「一般人だと思った？残念、逸般人でした！」って感じで、サクッとマサカリ投げ返したいですね！&lt;/p&gt;

&lt;h2&gt;補足&lt;/h2&gt;

&lt;p&gt;Data::Section::Simple (というか __DATA__ ファイルハンドルが mod_perl では使えない、とスライドにありますが、
厳密には、mod_perl ではなく、Apache::Registry/PerlRun などの、いわゆる「速いCGI」としての mod_perl 環境の制限らしいです。
(と、&lt;a href=&quot;https://twitter.com/mod_perl_info/status/253419203976118273&quot;&gt;mod_perl の神から、お告げがありました&lt;/a&gt; )
試したことないのですが、素の mod_perl のハンドラだと使えるらしいです。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>YAPC::Asia 2012 初日でした</title>
   <link href="http://tsucchi.github.com//yapcasia/2012/09/28/yapc_day1"/>
   <updated>2012-09-28T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//yapcasia/2012/09/28/yapc_day1</id>
   <content type="html">&lt;p&gt;昨日は前夜祭で、今日から、&lt;a href=&quot;http://yapcasia.org/2012/&quot;&gt;YAPC::Asia&lt;/a&gt; でした。&lt;/p&gt;

&lt;p&gt;ここで宣伝。ワタクシも、土曜日に発表いたします。(14:10 からだよ！裏番組は宮川さんと弾さんだけどがんばるからよろしく！)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;Perl と SQL のいろいろ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;初心者〜中級者向けくらいに、Perl と SQL にまつわるお話をいたします。一般論も、あんまり見ないけど結構大事な話も
しようと思ってます。&lt;/p&gt;

&lt;p&gt;さてさて、今日はこの辺を見てきましたよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/3abbfeb4-ab8b-11e1-8c20-e9b36aeab6a4&quot;&gt;オープニング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/40330888-db88-11e1-8417-0d4e6aeab6a4&quot;&gt;What Does Your Code Smell Like?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/405aef14-da94-11e1-a30d-0d4e6aeab6a4&quot;&gt;Acmeism, Pegex and CoffeeScript on CPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/5da12cf6-adde-11e1-aff4-22926aeab6a4&quot;&gt;rapid prototyping with Mojolicious::Lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/4d98200c-dae4-11e1-b6d8-0d4e6aeab6a4&quot;&gt;大きくなったシステムの疎結合化への取り組み &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/37e5eabc-d550-11e1-ace3-37a36aeab6a4&quot;&gt;Perlと出会い、Perlを作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/5425192c-d411-11e1-8310-37a36aeab6a4&quot;&gt;App::LDAP - 管理者と百台のコンピュータ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/7dfaa352-afbd-11e1-9133-ef7b6aeab6a4&quot;&gt;DBD::SQLite: Recipes, Issues, and Plans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/99d615f2-b4d6-11e1-8faa-92b46aeab6a4&quot;&gt;Profiling memory usage of Perl applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/d1edd2c0-ab9b-11e1-918c-2a656aeab6a4&quot;&gt;平均レスポンスタイム50msをPerlで捌く中規模サービスの実装/運用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/3c10ee1c-abc4-11e1-af4b-ea856aeab6a4&quot;&gt;Perlアプリケーションのベンチマークとプロファイリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/72256d20-dbad-11e1-bcf1-95936aeab6a4&quot;&gt;Lightning Talks Day 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;何といっても、今年は Tim Bunce ですよ！YAPC に参加し始めてから、毎年アンケートに「招待してほしい海外スピーカー」っていう欄に、
毎年毎年「Tim Bunce」って書いてたので、超うれしかったです。発表もすごく良かった。前にメモリまわりで悩んだときは、なかなか解決しなくて
困ってたけど、今日発表のあった Tim のプロダクト(結局名前何になるんだろ？)なら多分すぐに問題見つけられそうだなー。あれはすごい。&lt;/p&gt;

&lt;p&gt;あと、今年初の&lt;a href=&quot;http://yapcasia.org/2012/news/socialize-during-lunch.html&quot;&gt;ランチ交流企画&lt;/a&gt;のくじを引いてみたら見事当選したので、大変良かったです。
今後も継続できるといいんじゃないかなー。&lt;/p&gt;

&lt;p&gt;懇親会は去年よりは話せたけど、基本ぼっちなのでだいぶきつい感じでしたー。でも少しずつ知り合いも増えてきたし、ネット上では知ってるけどリアルでは知らない方とかに会えたのでまあ良しとしましょう。明日発表じゃなかったらもうちょい粘っても良かったのですが、発表あるし、湿布が切れてるのでだいぶ腰痛かったし。。。&lt;/p&gt;

&lt;p&gt;と、言うわけで明日も(ってか明日こそ)頑張ろう。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>明日から YAPC::Asia ですよ！</title>
   <link href="http://tsucchi.github.com//yapcasia/2012/09/26/yapc"/>
   <updated>2012-09-26T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//yapcasia/2012/09/26/yapc</id>
   <content type="html">&lt;p&gt;明日から、&lt;a href=&quot;http://yapcasia.org/2012/&quot;&gt;YAPC::Asia&lt;/a&gt; が始まるみたいです。&lt;/p&gt;

&lt;p&gt;明日は前夜祭、金曜、土曜が本編みたいですよ！&lt;/p&gt;

&lt;p&gt;ワタクシも、土曜日に発表いたします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;Perl と SQL のいろいろ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;初心者〜中級者向けくらいに、Perl と SQL にまつわるお話をいたします。一般論も、あんまり見ないけど結構大事な話も
しようと思ってます。&lt;/p&gt;

&lt;p&gt;裏番組は、&lt;a href=&quot;http://gihyo.jp/news/report/01/yapcasia2012/00b2&quot;&gt;技評の特集&lt;/a&gt;にも紹介されてる弾さんと、世界の宮川さんなので、
大変心配(お客さんきていただけるだろーか。。。的な意味で)なのですが、頑張って発表しますので、よろしくです。&lt;/p&gt;

&lt;p&gt;ではでは、また明日。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Kappa の飼い方(Kappa という ORM の話) その4 select 系いろいろ</title>
   <link href="http://tsucchi.github.com//kappa/2012/09/25/kappa_select_and_rowobject"/>
   <updated>2012-09-25T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//kappa/2012/09/25/kappa_select_and_rowobject</id>
   <content type="html">&lt;p&gt;こんばんはこんばんは。
今週末は「Perl のお祭り」こと &lt;a href=&quot;http://yapcasia.org/2012/&quot;&gt;YAPC::Asia&lt;/a&gt;ですね！皆様、見る方も発表する方も準備は万全でしょうか？&lt;/p&gt;

&lt;p&gt;(私？お察しください。。。資料はちょっとずつ書いてるよ！)&lt;/p&gt;

&lt;p&gt;ここで宣伝。&lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;Perl と SQL のいろいろ&lt;/a&gt;
というタイトルでお話させていただきます。裏番組がどちらも大変なビッグネームなので恐縮なのですが、初中級者くらい向けに Perl と SQL にまつわる話を
させていただこうと思っております。&lt;/p&gt;

&lt;p&gt;(※ここまでテンプレ)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tsucchi/p5-Kappa&quot;&gt;Kappa&lt;/a&gt; という ORM の話。今日は select にまつわる色々です。&lt;/p&gt;

&lt;h2&gt;目次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/15/kappa_background&quot;&gt;その1 開発の背景のお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/17/kappa_install&quot;&gt;その2 インストールとかのお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/22/kappa_basic_operation&quot;&gt;その3 基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/25/kappa_select_and_rowobject&quot;&gt;その4 select 系いろいろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/02/kappa_row_object&quot;&gt;その5 Row オブジェクトの基本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/09/kappa_customized_row_object&quot;&gt;その6 Row オブジェクトのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/10/kappa_table_class&quot;&gt;その7 テーブルクラスとそのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/23/kappa_misc&quot;&gt;その8 雑多な話&lt;/a&gt;

&lt;h2&gt;事前準備&lt;/h2&gt;

&lt;p&gt;テーブルを作っておきましょう。前回作ってれば作らなくていいです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dbi:SQLite:dbname=$dbfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CREATE TABLE detective (&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  id    INT PRIMARY KEY,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  name  TEXT&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;データも入れといてくださいね。(これも前回入れてる人は入れなくていいです。)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;譲崎　ネロ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;エルキュール・バートン&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;コーデリア・グラウカ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;select 系のいろいろ&lt;/h2&gt;

&lt;p&gt;select 系は、メソッドがいっぱいありますが、一定のルールになっているので、慣れれば分かるようになると思います。基本的には、4タイプの戻り値指定と、4タイプの select 方法の組み合わせです。&lt;/p&gt;

&lt;h3&gt;戻り値指定の4タイプ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;select_row&lt;/li&gt;
&lt;li&gt;select_all&lt;/li&gt;
&lt;li&gt;select_itr&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;戻り値指定は上記の4種があります。&lt;/p&gt;

&lt;p&gt;select はコンテキストに応じて 1レコード or 全レコードを返します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#この場合だと 1レコード&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;#この場合だと全レコード&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;で、select_row系 は、この1レコードを返すタイプです。前回もちょっとだけ説明しましたが、1レコード分の値は row_object_enable が TRUE なら Row オブジェクトが返り、FALSE なら hashref(fetchrow_hashref の値)が返ります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#この2つは同じ&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;select_all系 は全レコードを返すタイプです。配列が返り、配列の1要素は、row の場合と同じです。(row_object_enable に応じて変わります。)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;@rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#この2つは同じ&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;select_itr系 はイテレータを返します。イテレータは next() ってメソッドだけが使えます。next を呼ぶと、1行分データ(Row オブジェクト or hashref)が
返ります。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$itr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_itr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$itr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;# $row をつかってあんなことやこんなことをします。&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;select 方法の4タイプ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;select_*_with_fields&lt;/li&gt;
&lt;li&gt;select_*_by_sql&lt;/li&gt;
&lt;li&gt;select_*_named&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;一番シンプルな select はとくに説明しなくても分かるかと思います。テーブル名と条件を指定します。&lt;/p&gt;

&lt;p&gt;with_fields は select と似てますが、引数に select 対象のカラムを指定できます。たとえば、select_row_with_fields だと
こんな感じです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_with_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# id だけ取る&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;この例だと、id だけ取るので、name は取れません。ビューとかに select する場合にハイコストな計算が走る行を除外したい時とかに
使うと良いと思います。&lt;/p&gt;

&lt;p&gt;by_sql は、テーブル名ではなく、SQL を指定します。プレースホルダを使います。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_all_by_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;SELECT * FROM detective WHERE id = ?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;第2引数は配列ではなく、配列リファレンスで bind する値を指定します。(配列ではなく、配列リファレンスなのは、第3引数としてテーブル名を指定したい
ためです。テーブル名は Row オブジェクトの紐付けに使うので重要です。)&lt;/p&gt;

&lt;p&gt;named なやつは、by_sql に似ていますが、名前つきプレースホルダが使えます。(これもテーブル名ではなく、SQL を指定するタイプです)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_row_by_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;SELECT * FROM detective WHERE id = :id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;何となくわかったでしょうか？&lt;/p&gt;

&lt;p&gt;たとえば select_itr_named なら、「イテレータを返して、名前つきプレースホルダの SQL を使うやつ」です。select_all_by_sql なら、「配列を返して、(名前なしの)プレースホルダの SQL を使うやつ」です。select_row_with_fields なら、「1行を返して、指定したテーブルの、指定したフィールドを返すやつ」です。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;今回は select 系のメソッドを紹介してみました。探偵さんの名前は覚えましたか？これは重要なファクターですよ！
(このネタ、どこまでどの程度通じてるのかよく分かりませんが、マイブームなので続けますよ！)&lt;/p&gt;

&lt;p&gt;次回は Row オブジェクトを紹介しようかなー。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>東京ゲームショウに行ってきた</title>
   <link href="http://tsucchi.github.com//event/2012/09/23/gameshow_milkyholms"/>
   <updated>2012-09-23T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//event/2012/09/23/gameshow_milkyholms</id>
   <content type="html">&lt;p&gt;なんか最近のスマートフォンのゲーム事情とか気になったので東京ゲームショウに行ってきた。&lt;/p&gt;

&lt;p&gt;すると、偶然ミルキィなんとか、という可愛い探偵さん(の中の人)達がライブをやっていたので、
偶然知ってた合いの手入れたりしながらライブを楽しんできた。「問☆題☆解☆決！」&lt;/p&gt;

&lt;h3&gt;さんこうにしたサイト&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.sugyan.com/entry/2012/07/24/002734&quot;&gt;国内旅行 - すぎゃーん日記&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>東京ゲームショウに行ってきた(もう少し真面目な？話)</title>
   <link href="http://tsucchi.github.com//event/2012/09/23/gameshow_majimena_hanashi"/>
   <updated>2012-09-23T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//event/2012/09/23/gameshow_majimena_hanashi</id>
   <content type="html">&lt;p&gt;「最近のスマートフォンのゲーム事情とか気になった」ってのは、ある程度本当の話。&lt;/p&gt;

&lt;p&gt;どっかのニュースサイトで、スマートフォン向け出品が増えてるみたいな、そんな話を見たので、
どうかな？と思ったのですが、実状はちょっと違うのかな、と。&lt;/p&gt;

&lt;p&gt;確かに gree とか大きなブース構えてて、それなりに集客していましたが、でもやっぱりゲーム機関係(ソニーとか)
そういうゲーム機をターゲットにしてる会社(カプコンとかコナミとか)のブースの方が盛り上がっているのかなって感じがした。&lt;/p&gt;

&lt;p&gt;で、某D社は出品してないし(よね？間違ってたらすいません。)、スマートフォン関係で言えば、ミルキィなんとか関連のスマートフォン向け
プラットフォーム(長いな。「ブシなんとか」、これでも長いなw)も、ほぼ待ち時間なしで遊べたりして、うーん、という感じです。
(個人的には楽しめたし、これが盛大にコケてミルキィ3期が無くなったりしたらマジで困るので頑張ってほしい。)
gree のブースは中は見てないです。&lt;/p&gt;

&lt;p&gt;ちなみに、着いたのが結構遅かったし、超絶混んでいて、なんとかロードのブース以外は真面目に見てないので、実際は違うのかもしれない。&lt;/p&gt;

&lt;h3&gt;その他思ったこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;幕張遠かった&lt;/li&gt;
&lt;li&gt;広すぎ。人多すぎ。混みすぎ。&lt;/li&gt;
&lt;li&gt;なので、ほんとにゲーム好きで、ゲームのいろいろが見たいなら、何とかして平日のチケットを手に入れないとダメじゃないかな&lt;/li&gt;
&lt;li&gt;ミルキィ可愛かった&lt;/li&gt;
&lt;li&gt;しかも距離が近くて大変良かった。こんな近いライブ他に無いのでは。&lt;/li&gt;
&lt;li&gt;ミルキアンは訓練されすぎ。なんだあれ。まあ自分も人のこと言えた義理じゃないが&lt;/li&gt;
&lt;li&gt;そんな感じなので、ミルキィのライブは楽しい。また行ってみたい。&lt;/li&gt;
&lt;li&gt;あれ？結局ミルキィなんとかの話になってるなw。まあ他見てねーし、仕方ないかw&lt;/li&gt;
&lt;li&gt;そういえば、ミルキィのプロデューサーが同い年らしい。オイラも頑張らないと&lt;/li&gt;
&lt;li&gt;最近嫌な事が沢山あって、結構滅入っていたのですが、魂が浄化されました。明日からも頑張ろう、っと&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Kappa の飼い方(Kappa という ORM の話) その3 基本操作</title>
   <link href="http://tsucchi.github.com//kappa/2012/09/22/kappa_basic_operation"/>
   <updated>2012-09-22T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//kappa/2012/09/22/kappa_basic_operation</id>
   <content type="html">&lt;p&gt;こんにちはこんにちは。
もうすぐ「Perl のお祭り」こと &lt;a href=&quot;http://yapcasia.org/2012/&quot;&gt;YAPC::Asia&lt;/a&gt;ですね！皆様、見る方も発表する方も準備は万全でしょうか？&lt;/p&gt;

&lt;p&gt;(私？お察しください。。。今日はちょっとだけ資料書いたよ！)&lt;/p&gt;

&lt;p&gt;ここで宣伝。&lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;Perl と SQL のいろいろ&lt;/a&gt;
というタイトルでお話させていただきます。裏番組がどちらも大変なビッグネームなので恐縮なのですが、初中級者くらい向けに Perl と SQL にまつわる話を
させていただこうと思っております。&lt;/p&gt;

&lt;p&gt;(※ここまでテンプレ)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tsucchi/p5-Kappa&quot;&gt;Kappa&lt;/a&gt; という ORM の話。今日は基本操作です。&lt;/p&gt;

&lt;h2&gt;目次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/15/kappa_background&quot;&gt;その1 開発の背景のお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/17/kappa_install&quot;&gt;その2 インストールとかのお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/22/kappa_basic_operation&quot;&gt;その3 基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/25/kappa_select_and_rowobject&quot;&gt;その4 select 系いろいろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/02/kappa_row_object&quot;&gt;その5 Row オブジェクトの基本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/09/kappa_customized_row_object&quot;&gt;その6 Row オブジェクトのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/10/kappa_table_class&quot;&gt;その7 テーブルクラスとそのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/23/kappa_misc&quot;&gt;その8 雑多な話&lt;/a&gt;

&lt;h2&gt;事前準備&lt;/h2&gt;

&lt;p&gt;テーブルを作っておきましょう。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dbi:SQLite:dbname=$dbfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CREATE TABLE detective (&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  id    INT PRIMARY KEY,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  name  TEXT&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;基本操作&lt;/h2&gt;

&lt;h3&gt;インスタンスの生成&lt;/h3&gt;

&lt;p&gt;インスタンスの生成はこんな感じです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dbi:SQLite:dbname=$dbfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;DBI のデータベースハンドラ($dbh)を作成して、それを第1引数に渡します。第2引数は、hashref として色々渡せるものがあるのですが、これについてはそのうち解説します。&lt;/p&gt;

&lt;p&gt;それから、この例のように Kappa のインスタンスをそのまま生成することは実はあんまりなくて、継承してプロジェクト毎にカスタマイズされた物体を作るような使い方を想定しているのですが、それは今後解説します。&lt;/p&gt;

&lt;p&gt;以降は、$db(Kappa のインスタンス)が作成されている前提で説明していきます。&lt;/p&gt;

&lt;h3&gt;insert&lt;/h3&gt;

&lt;p&gt;insert メソッドは INSERT 文を実行します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;第1引数はテーブル名、第2引数は hashref で、値を指定します。この例だと、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;mysql&quot;&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;detective&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;と等価です。もっというと、&lt;a href=&quot;http://search.cpan.org/dist/SQL-Maker/&quot;&gt;SQL::Maker&lt;/a&gt;というモジュールの、insert メソッドで生成される SQL
の実行結果と等価です。戻り値はありません。最後に INSERT した ID(mysql_insertid とか)は「返さない」ので、$dbh から自前で拾ってください。&lt;/p&gt;

&lt;h3&gt;update&lt;/h3&gt;

&lt;p&gt;update メソッドは UPDATE 文を実行します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;譲崎　ネロ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#主役交代(?!)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;第1引数はテーブル名、第2引数は hashref で、UPDATE する値を指定します。第3引数も hashref でこれは UPDATE に使うキーです。
この例だと、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;mysql&quot;&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detective&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;譲崎　ネロ&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;と等価です。もっというと、&lt;a href=&quot;http://search.cpan.org/dist/SQL-Maker/&quot;&gt;SQL::Maker&lt;/a&gt;というモジュールの、update メソッドで生成される SQL
の実行結果と等価です。戻り値はありません。&lt;/p&gt;

&lt;p&gt;主役が変わっちゃうと困るので戻しておきましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;select&lt;/h3&gt;

&lt;p&gt;select メソッドは SELECT 文を実行します。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;第1引数はテーブル名、第2引数は hashref で、条件を指定します。
この例だと、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;mysql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detective&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;と等価です。もっというと、&lt;a href=&quot;http://search.cpan.org/dist/SQL-Maker/&quot;&gt;SQL::Maker&lt;/a&gt;というモジュールの、select メソッドで生成される SQL
の実行結果に「LIMIT 1」をつけたものと等価です。戻り値ですが、Kappa の row_object_enable という内部変数の状態によって変わります。デフォルトは 1(TRUE)で、Row オブジェクトが有効になっています。この場合、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;みたいな感じで、フィールド名がメソッドになる Row オブジェクトが返ります。Row オブジェクトの詳細はそのうち説明します。
で、row_object_enable に 0(FALSE)を指定すると、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_object_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;こんな感じで、Row オブジェクトの代わりに hashref が返るようになります。&lt;/p&gt;

&lt;p&gt;結果が複数欲しい場合は、リストコンテキストで受ければ大丈夫です。その前に、複数行返るように2件目以降のデータも入れておきましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;譲崎　ネロ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;エルキュール・バートン&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;コーデリア・グラウカ&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;明智　小衣&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 条件指定していないから複数の結果が返ります。&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;#39;譲崎　ネロ&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;リストを受けると、row_object_enable が有効なら Row オブジェクトの配列、無効なら hashref の配列が返ります。&lt;/p&gt;

&lt;h3&gt;コンテキストに応じない select&lt;/h3&gt;

&lt;p&gt;select メソッドはコンテキストに応じて、1行分(スカラーコンテキストの場合)か全行分(リストコンテキストの場合)を返すのですが、
戻り値をそのまま渡すような使い方をすると、ちょっと分かりにくくなります。&lt;/p&gt;

&lt;p&gt;こういう場合は、用途に応じて、メソッドを使い分けるのがおすすめです。&lt;/p&gt;

&lt;p&gt;1行だけ返す場合、select_row を使います。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;対象行すべてが欲しい場合、select_all を使います。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 条件指定していないから複数の結果が返ります。&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;#39;シャーロック・シェリンフォード&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;#39;譲崎　ネロ&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;select 系のメソッドはもっと色々あるので、それは今後紹介していきたいと思います。&lt;/p&gt;

&lt;h3&gt;delete&lt;/h3&gt;

&lt;p&gt;delete メソッドは DELETE 文を実行します。一人だけ探偵じゃない人が混ざっているので、消しておきましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detective&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# 小衣ちゃんは探偵ではない&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;第1引数はテーブル名、第2引数は hashref で、値を指定します。この例だと、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;mysql&quot;&gt;&lt;span class=&quot;k&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detective&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;と等価です。もっというと、&lt;a href=&quot;http://search.cpan.org/dist/SQL-Maker/&quot;&gt;SQL::Maker&lt;/a&gt;というモジュールの、delete メソッドで生成される SQL
の実行結果と等価です。戻り値はありません。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;今回は基本操作を紹介しました。次回は select 系のメソッドとか Row オブジェクトまわりを紹介しようかな、と思っております。&lt;/p&gt;

&lt;p&gt;それから今回の例が若干おかしいのは仕様です。最近マイブームなのです。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Kappa の飼い方(Kappa という ORM の話) その2 インストールとかのお話</title>
   <link href="http://tsucchi.github.com//kappa/2012/09/17/kappa_install"/>
   <updated>2012-09-17T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//kappa/2012/09/17/kappa_install</id>
   <content type="html">&lt;p&gt;こんにちはこんにちは。
もうすぐ「Perl のお祭り」こと &lt;a href=&quot;http://yapcasia.org/2012/&quot;&gt;YAPC::Asia&lt;/a&gt;ですね！皆様、見る方も発表する方も準備は万全でしょうか？&lt;/p&gt;

&lt;p&gt;(私？お察しください。。。)&lt;/p&gt;

&lt;p&gt;ここで宣伝。&lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;Perl と SQL のいろいろ&lt;/a&gt;
というタイトルでお話させていただきます。裏番組がどちらも大変なビッグネームなので恐縮なのですが、初中級者くらい向けに Perl と SQL にまつわる話を
させていただこうと思っております。&lt;/p&gt;

&lt;p&gt;(※ここまでテンプレ)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tsucchi/p5-Kappa&quot;&gt;Kappa&lt;/a&gt; という ORM の話。今日はインストール編です&lt;/p&gt;

&lt;h2&gt;目次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/15/kappa_background&quot;&gt;その1 開発の背景のお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/17/kappa_install&quot;&gt;その2 インストールとかのお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/22/kappa_basic_operation&quot;&gt;その3 基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/25/kappa_select_and_rowobject&quot;&gt;その4 select 系いろいろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/02/kappa_row_object&quot;&gt;その5 Row オブジェクトの基本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/09/kappa_customized_row_object&quot;&gt;その6 Row オブジェクトのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/10/kappa_table_class&quot;&gt;その7 テーブルクラスとそのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/23/kappa_misc&quot;&gt;その8 雑多な話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;インストール&lt;/h2&gt;

&lt;h3&gt;インストールの前提&lt;/h3&gt;

&lt;p&gt;Perl と cpanm はもちろん入ってますよね？なければ入れといてください。良く分からなければ perlbrew とか cpanm とかで
ググってみてください。&lt;/p&gt;

&lt;p&gt;DBMS(Oracle とか MySQL とか PostgreSQLとか)がインストールされていて、ドライバ(クライアント)が入っていることが必要です。&lt;/p&gt;

&lt;p&gt;Ubuntu で MySQL なら libmysqlclient-dev ってやつを入れるらしいです。(ほかの OS や DBMS についてはググってね)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tcsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install libmysqlclient-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;で、DBD を入れます。(DBD::Oracle/mysql/pg など)&lt;/p&gt;

&lt;p&gt;MySQL なら&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tcsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cpanm DBI DBD::mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;で、インストールなのですが、多分コケますw。なんか DB つないでアレコレするテストが入ってるみたいなんですよね。
(コレなんとかならないんですかねー。。。author test でもいいと思うんだけどなー。。。)&lt;/p&gt;

&lt;p&gt;ちゃんとしたやり方もあるかもしれませんが、めんどいので --force つけて入れます。&lt;/p&gt;

&lt;p&gt;SQLite ならこんな感じ。(クライアント無くてもたしか大丈夫だったと思う)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tcsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cpanm DBI DBD::SQLite
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;普通の開発なら、MySQL とかポスグレ使うと思いますが、以降の説明では SQLite を使うので、DBD::SQLite も入れといてくださいね。&lt;/p&gt;

&lt;h3&gt;DBI/DBD の動作確認&lt;/h3&gt;

&lt;p&gt;まずは DBI 使って、ちゃんとテスト用の SQL を発行してみるのが良いかもしれませんね。こんな感じ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dumper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;a.db&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;unlink&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbfile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dbi:SQLite:dbname=$dbfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# テスト用のテーブル作って。。。&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CREATE TABLE test_dayo (&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  id     INT PRIMARY KEY,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  value  TEXT&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# テストデータ入れます&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;INSERT INTO test_dayo(id, value) values (?,?)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$sth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$sth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;bbb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# select して、データが入ってるのを確認&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rows_aref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectall_arrayref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT * FROM test_dayo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Slice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dumper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rows_aref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#こんな結果が返れば OK&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# $VAR1 = [&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#           {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#             &amp;#39;value&amp;#39; =&amp;gt; &amp;#39;aaa&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#             &amp;#39;id&amp;#39; =&amp;gt; 123&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#           },&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#           {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#             &amp;#39;value&amp;#39; =&amp;gt; &amp;#39;bbb&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#             &amp;#39;id&amp;#39; =&amp;gt; 456&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#           }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#         ];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;インストール&lt;/h3&gt;

&lt;p&gt;ここまでくれば環境的な問題はクリアできているので、インストールはラクラクです。&lt;/p&gt;

&lt;p&gt;Kappa ですが、github と Dropbox の共有フォルダにしか置いてません。(CPAN に無いので、cpanm で入りません)&lt;/p&gt;

&lt;p&gt;github からインストールできる様な猛者なら、こんな説明いらないと思いますので、ここでは Dropbox から
入れる方法を紹介します。&lt;/p&gt;

&lt;p&gt;まず、&lt;a href=&quot;https://www.dropbox.com/sh/2a8u7yq1w41z4fv/DdRxaovfxw/Kappa&quot;&gt;Kappa の共有フォルダ&lt;/a&gt;にアクセスします。
で、ここから最新のバージョンのものをダウンロードします。現時点では 0.12 ですね。(0.12 はちょっと色々手を入れたので、
0.11 のほうがもしかしたら安定してるかもです。)&lt;/p&gt;

&lt;p&gt;で、/tmp とか /var/tmp とかホームディレクトリのどっかに置いてから、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tcsh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tar zxvf Kappa-バージョン番号.tar.gz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Kappa-バージョン番号
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cpanm --install-deps .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;perl Makefile.PL
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make test
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;してみて、特にエラーがなければ OK です。&lt;/p&gt;

&lt;h3&gt;テストプログラムの実行&lt;/h3&gt;

&lt;p&gt;さっきのテストプログラムを Kappa を使って書き換えてみましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dumper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;a.db&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;unlink&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbfile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dbi:SQLite:dbname=$dbfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# テスト用のテーブル作って。。。&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CREATE TABLE test_dayo (&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  id     INT PRIMARY KEY,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  value  TEXT&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# テストデータ入れます&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Kappa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;test_dayo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;test_dayo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;bbb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_object_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# select して、データが入ってるのを確認&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;test_dayo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dumper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#こんな結果が返れば OK&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# $VAR1 = [&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#           {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#             &amp;#39;value&amp;#39; =&amp;gt; &amp;#39;aaa&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#             &amp;#39;id&amp;#39; =&amp;gt; 123&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#           },&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#           {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#             &amp;#39;value&amp;#39; =&amp;gt; &amp;#39;bbb&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#             &amp;#39;id&amp;#39; =&amp;gt; 456&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#           }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#         ];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;ORM とか DBI に慣れてる人なら、だいたい雰囲気分かるかもですが、詳しい説明は次回以降していきます。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Kappa の飼い方(Kappa という ORM の話) その1 開発の背景のお話</title>
   <link href="http://tsucchi.github.com//kappa/2012/09/15/kappa_background"/>
   <updated>2012-09-15T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//kappa/2012/09/15/kappa_background</id>
   <content type="html">&lt;p&gt;こんにちはこんにちは。
もうすぐ「Perl のお祭り」こと &lt;a href=&quot;http://yapcasia.org/2012/&quot;&gt;YAPC::Asia&lt;/a&gt;ですね！皆様、見る方も発表する方も準備は万全でしょうか？&lt;/p&gt;

&lt;p&gt;(私？お察しください。。。)&lt;/p&gt;

&lt;p&gt;ここで宣伝。&lt;a href=&quot;http://yapcasia.org/2012/talk/show/863251ce-d870-11e1-924a-0d4e6aeab6a4&quot;&gt;Perl と SQL のいろいろ&lt;/a&gt;
というタイトルでお話させていただきます。裏番組がどちらも大変なビッグネームなので恐縮なのですが、初中級者くらい向けに Perl と SQL にまつわる話を
させていただこうと思っております。&lt;/p&gt;

&lt;p&gt;(※ここまでテンプレ)&lt;/p&gt;

&lt;p&gt;さて、YAPC とは今回の話は関係なくて、(すげー反響があったら関係するかもしれんですが、それは無いでしょうw)&lt;/p&gt;

&lt;p&gt;私、&lt;a href=&quot;https://github.com/tsucchi/p5-Kappa&quot;&gt;Kappa&lt;/a&gt; という ORM を書いてます。今回はそのお話です。&lt;/p&gt;

&lt;h2&gt;目次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/15/kappa_background&quot;&gt;その1 開発の背景のお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/17/kappa_install&quot;&gt;その2 インストールとかのお話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/22/kappa_basic_operation&quot;&gt;その3 基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/09/25/kappa_select_and_rowobject&quot;&gt;その4 select 系いろいろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/02/kappa_row_object&quot;&gt;その5 Row オブジェクトの基本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/09/kappa_customized_row_object&quot;&gt;その6 Row オブジェクトのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/kappa/2012/10/10/kappa_table_class&quot;&gt;その7 テーブルクラスとそのカスタマイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/kappa/2012/10/23/kappa_misc&quot;&gt;その8 雑多な話&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;背景&lt;/h2&gt;

&lt;p&gt;はてダにいろいろ書いてるので、僕のストーカーだったら良く分かると思うのですが、そんな人は多分いないので(居たら居たで嫌だしw)、順を追って説明しましょう。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20081213/1229174578&quot;&gt;最近のお仕事の話&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;今見返したら、これ見ても全然わかんねーやw。えーっとワタクシ、業務系アプリで、ジャンルでいうと、製造実行システム(MES)というやつの、バックエンド作ってます。
もうちょいわかりやすく言うと、Web-API 作ったり、DB のメンテしたり、DB の設計したりそんなことしてます。&lt;/p&gt;

&lt;p&gt;で、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20090615/1245078628&quot;&gt;データベースのテストの話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;にもちょこっと書いてるのですが、最初にあった WEB-API のフレームワーク(内製なんだけど僕が作ったんじゃなくて、どっかの案件であるていど実績があったやつっぽい。
今となっては僕が色々手を入れて別物になってますがね。。。)が、クライアントのリクエストに応じてストアドプロシージャを実行する仕組みになってました。&lt;/p&gt;

&lt;p&gt;で、ストアドってまあ良い面もあるのでしょうけど、少なくとも僕のユースケースではダメダメな面がいろいろとありました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20110806/1312618633&quot;&gt;MySQL のストアドプロシージャの話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;と、言うわけで、「生の SQL がある程度うまく扱える仕組みがあるといいなー」ということを、1年前くらいから考え始めました。&lt;/p&gt;

&lt;p&gt;で、いろいろ悩んで、テーブルデータゲートウェイを自作してみたり、Teng 使ってみたりしたのですが...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120514/1337015637&quot;&gt;最近のお仕事の話とか、ORM のはなしとか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120525/1337957432&quot;&gt;ORM とかテーブルデータゲートウェイとか、その周辺の話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;どうもウチの仕組みとマッチしなかった。(念のため書いときますが、Perl 使える人が僕以外にもっといたら、Teng 使った時点で
問題解決してました。Perl あんま分かってないひとに、スキーマクラスがどうこうとか、それをメンテさせるとか考え始めたら頭痛くなって、
「スキーマクラスなくても使える ORM がいるね。。。」と思った次第。Teng いいですよ。僕みたいに車輪の再発明して ORM 書くとかどう考えても
アホのすることです。。。)&lt;/p&gt;

&lt;p&gt;で、作ってみました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20120604/1338780295&quot;&gt;Kappa という ORM を書いてみた話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;まあここに書いた話は今でもある程度は通用するのですが、もうちょい包括的なドキュメントがあったほうがいいかもなー、と思ったので本記事を
書いてみた次第です。&lt;/p&gt;

&lt;p&gt;と、いうわけで明日以降は使い方を説明していきたいと思います！(YAPC の資料書きながらなので、どこまで書けるか分かりませんが。。。)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>フックポイントとかの話</title>
   <link href="http://tsucchi.github.com//programming/2012/08/22/hookpoint"/>
   <updated>2012-08-22T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//programming/2012/08/22/hookpoint</id>
   <content type="html">&lt;p&gt;フレームワークやそれに類するものを作っているとして、こんなのがあるとします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$executor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;で、本処理の前後に何かを挟みたくなって、フックポイントをつけたりします。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$executor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#事前に引数を加工する処理とか&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#あとで結果を加工する処理とか&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeExecutorBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pre_execute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#デフォルトは何もしない&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post_execute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#デフォルトは何もしない&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;なんでこんなのが欲しくなるか、というと、主に継承してる場合とかに、本処理は同じなんだけど、ちょっと前提が違うとか
大抵そんな感じのことです。&lt;/p&gt;

&lt;p&gt;ただ、最近は、「フックポイントって分かりにくくね？？」とか思ったりしていて、こういう処理を書くことが多いです。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$executor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# こっちは最初のまま&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeExecutorBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_execute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#...デフォルトの本処理がここに入る&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;こんな感じにしておくと、継承した際には、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeExecutorChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%new_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_nanrakano_kakou&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%new_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;こんな感じで、実装を入れ替えたければ入れ替えればいいし、加工してからデフォルトの処理を呼ぶとかそういうことができます。&lt;/p&gt;

&lt;p&gt;ただし、本処理がこの例みたいに1パターンしかない場合はあまりメリットはありません。&lt;/p&gt;

&lt;p&gt;僕が普段作ってるのはある種の Web-API なので、こういう処理が沢山でてきます。
まあ基本は CRUD +αくらいなのですが、それでも 1つのモデルに対して最低4つの実装があるので、十分面倒くさいです。
で、こういうときに継承関係作りつつモデルクラスを作ったりしていると、こっちの方が取扱いしやすいなー、と思っています。&lt;/p&gt;

&lt;p&gt;たとえば、CREATE + DELETE の replace という API を作りたい場合も&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeExecutorBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_replace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%delete_param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_delete_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%delete_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;みたいな感じにしとけば良いです。&lt;/p&gt;

&lt;p&gt;で、これの欠点ですが、この replace の例みたいなのは、実はあんまり良くないやり方でして、ある API からほかの default_* を呼ぶと、
その default_hogehoge が、ほかの default_fuga を使ってたりして、意図せず無限再帰呼び出しになってしまうことがあります。ですので、
default_* 内でほかの default_系メソッドを呼ぶ際は細心の注意を払う必要があります。(まあ一回テストすれば見つかりますが。とはいえ
無限再帰呼び出しは発生するとビックリするからねー。)&lt;/p&gt;

&lt;p&gt;まあこういうのの実装方法としては、ほかには&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hook::LexWrap みたいな、処理の前後をフックするモジュールを使う&lt;/li&gt;
&lt;li&gt;Moose とかのクラスビルダーのそういう機能を使う&lt;/li&gt;
&lt;li&gt;最初の例に書いたようなフックポイントをつける&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;みたいな感じで、いろいろやり方はあると思うので、用途や環境に応じて使い分けるといいんじゃないかなー、と思います。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>RSpec だと何がうれしいのか良く分からないので、Perl でそれっぽいの書いてみた</title>
   <link href="http://tsucchi.github.com//test/2012/08/06/rspec-tekina-perl"/>
   <updated>2012-08-06T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//test/2012/08/06/rspec-tekina-perl</id>
   <content type="html">&lt;p&gt;なんか、最近 Rails 界隈を中心に RSpec がオワコンだ、的な話があったりとか、なんか盛り上がってて楽しそうなんだけど、
僕は Ruby ほとんど書けないし書かないので、何がうれしくて何が悲しいのか分からないのが悲しいので、Perl で書きながらお勉強してみた。&lt;/p&gt;

&lt;p&gt;教材はこれ&lt;a href=&quot;http://d.hatena.ne.jp/t-wada/20100228/p1&quot;&gt;RSpec の入門とその一歩先へ - t-wadaの日記&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;最初のテスト&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Test::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;More&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subtest&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;message filter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;MessageFilter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;done_testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;最初のテストを実行&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;tsucchi@vogue[582]$ prove -l t
t/message_filter.t ..     # No tests run!
t/message_filter.t .. 1/? 
#   Failed test 'No tests run for subtest &quot;message filter&quot;'
#   at t/message_filter.t line 9.
# Looks like you failed 1 test of 1.
t/message_filter.t .. Dubious, test returned 1 (wstat 256, 0x100)
Failed 1/1 subtests 

Test Summary Report
-------------------
t/message_filter.t (Wstat: 256 Tests: 1 Failed: 1)
  Failed test:  1
  Non-zero exit status: 1
Files=1, Tests=1,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.01 cusr  0.00 csys =  0.03 CPU)
Result: FAIL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クラス(Perl なのでパッケージ)作ってないからテストはこける。&lt;/p&gt;

&lt;h2&gt;クラスを作る&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;「クラスを作る」で作ったクラスを実行&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;tsucchi@vogue[587]$ prove -l t
t/message_filter.t .. ok   
All tests successful.
Files=1, Tests=1,  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストが通った。&lt;/p&gt;

&lt;h2&gt;最初のテスト&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Test::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;More&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subtest&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;use_ok&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;MessageFilter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subtest&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;should detect message with NG word&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;hello from foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;done_testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;通常系のテストを足した。&lt;/p&gt;

&lt;h2&gt;最初のテストを実行&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;tsucchi@vogue[592]$ prove -l t
t/message_filter.t .. 1/? Can't locate object method &quot;new&quot; via package &quot;MessageFilter&quot; at t/message_filter.t line 13.
# Child (should detect message with NG word) exited without calling finalize()

#   Failed test 'should detect message with NG word'
#   at /home/tsucchi/perl5/perlbrew/perls/perl-5.16.0/lib/5.16.0/Test/Builder.pm line 252.
# Tests were run but no plan was declared and done_testing() was not seen.
t/message_filter.t .. Dubious, test returned 29 (wstat 7424, 0x1d00)
Failed 1/2 subtests 

Test Summary Report
-------------------
t/message_filter.t (Wstat: 7424 Tests: 2 Failed: 1)
  Failed test:  2
  Non-zero exit status: 29
  Parse errors: No plan found in TAP output
Files=1, Tests=2,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.01 cusr  0.00 csys =  0.03 CPU)
Result: FAIL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実装がないのでこける。&lt;/p&gt;

&lt;h2&gt;仮実装&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;bless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;detect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;仮実装を実行&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;tsucchi@vogue[595]$ prove -l t
t/message_filter.t .. ok   
All tests successful.
Files=1, Tests=2,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.02 cusr  0.00 csys =  0.04 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通った。... 三角測量とかだるいのでやらない。RSpec 関係ないし。&lt;/p&gt;

&lt;h2&gt;明白な実装&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;bless&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;detect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qr/$word/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;明白な実装を実行&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;tsucchi@vogue[599]$ prove -l t
t/message_filter.t .. ok   
All tests successful.
Files=1, Tests=2,  1 wallclock secs ( 0.02 usr  0.00 sys +  0.02 cusr  0.00 csys =  0.04 CPU)
Result: PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もちろんこれも通る。&lt;/p&gt;

&lt;h2&gt;before とか無いので、setup 処理を書く&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022/20110703/1309650762&quot;&gt;前にブログにかいた&lt;/a&gt;けど、Hook::LexWrap を使うとこういうの対応できる。
三角測量のときの失敗のテストもついでに足した。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Test::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;More&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Hook::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LexWrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subtest&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;use_ok&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;MessageFilter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;subtest&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subtest&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;should detect message with NG word&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;hello from foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subtest&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;should not detect message with NG word&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;done_testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;なんか重複がどうとかいってるけど&lt;/h2&gt;

&lt;p&gt;そんなのべつにどうでも良くね？&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spec&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;message_filter&amp;#39;&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;with argument &amp;quot;foo&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_detect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hello from foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_detect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hello, world!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;うーん、上記のやつと、Perl の最終のやつにどういう差があるのかオイラには分からなかったや。暗黙なあんなこんなはキモいから
setup もあんまり良くないって xUTP に書いてあった気がするけど、RSpec のやつはそれどころの騒ぎじゃなく暗黙のあんなこんな
が入ってるように見えるんだけど、いいのかな？&lt;/p&gt;

&lt;p&gt;仮に短く書けることを美徳とするなら、確かに美しいのだが、僕は「冗長なのはダメだけど、短けりゃいいってもんでもない」、
ってスタンスでプロダクトコードもテストコードも書いてるので、なんだかなぁ、という印象。(Perl のも冗長さは無いでしょう？)
先に進むともうちょっと見え方変わるかな？&lt;/p&gt;

&lt;p&gt;ちなみに、この例にしたがわないなら、僕はこのテストはこう書く。(破壊しないことが明確な場合はフィクスチャは分けない。
たいていその方がテストがシンプルになるから)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Test::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;More&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subtest&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;use_ok&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# 多分実際はファイル分けるだろうな。use_ok だけのテストファイル作る。&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;MessageFilter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subtest&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;detect&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;hello from foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;done_testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Part2 に続く... かもしれない&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>無印の XP のメディアからインストールすると死ぬかもしれない、というお話</title>
   <link href="http://tsucchi.github.com//windows/2012/08/05/mujirushi-xp"/>
   <updated>2012-08-05T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//windows/2012/08/05/mujirushi-xp</id>
   <content type="html">&lt;p&gt;最近の僕の家の PC は、Ubuntu を入れて快適に使っているのですが、一応 MS-Office とか使える体制を作っといた方が良いかな、
と思って Windows を入れようと思ったわけです。&lt;/p&gt;

&lt;p&gt;で、ちょっと調べたら Virtual Box が快適そうだったので、入れてみて、Windows 入れて、「おー全然問題ねー、超簡単じゃん」と
ここまでは思ってたんですよ。&lt;/p&gt;

&lt;p&gt;で、インストールが終わってから、Windows Update かけてみたら、なんか「Windows Update が見られない場合」みたいな変な MS
のページに飛ばされちゃうんですよ。で、仕方ないから手で XP の SP3 を落としてみたら、「SP3 を入れるには SP1 以上が必要ですよー」
みたいなことを言われちゃうんですよ。&lt;/p&gt;

&lt;p&gt;で、仕方ないから、XP SP1 とか SP2 のダウンロードパッケージを手動ダウンロードしようと思ったら、ダウンロードボタン押しても何故か
ダウンロードしてくれないのですよ。。。(ちなみに SP3 は無事ダウンロードできたんだけどねー。。。)&lt;/p&gt;

&lt;p&gt;なんか IE6 も内部バージョン的なのがあるんですかね？IE が古いのが悪いのか？と思って、IE8 入れようとしたら、「IE8 を入れるには (ry」&lt;/p&gt;

&lt;p&gt;をい！オレはどうすればいいんだよ！&lt;/p&gt;

&lt;p&gt;と、言うわけで、多分無印の XP からインストールして、PC がそれ一台しか無いと、多分ここで詰みます。(まあ直リンをうまく指定すればダウンロード
できる場所も多分どっかにあるんだろうけど、探すのめんどくさいからやらなかった。あ、あと Firefox 入れるって手もあったかも。なお、Chrome は変な
ダイアログが出てインストールできなかった。)&lt;/p&gt;

&lt;p&gt;結局ホストOSで SP2 をダウンロードして、Virtual Box のファイル共有でファイルを送り込んで、無事アップグレードに成功しました。(SP2 になれば、
SP3 も無事に入って、そこから Windows Update は問題なくできた)&lt;/p&gt;

&lt;p&gt;8年くらい前に買ったこの無印 XP のメディアは、今までも今回も大活躍してくれてるんですが、もうそろそろ限界かなー、というお話でした。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>プロキシ経由でインターネット接続するようなコマンドを便利に叩く</title>
   <link href="http://tsucchi.github.com//linux/2012/07/21/proxycmd"/>
   <updated>2012-07-21T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//linux/2012/07/21/proxycmd</id>
   <content type="html">&lt;p&gt;たとえば、cpanm とか叩くときに、手で HTTP_PROXY とかの環境変数指定してもいいんだけど、
ウチのプロキシはパスワードも要求されるので、環境変数消し忘れるとパスワードが残っちゃう
のが嫌だなぁとか思ったり。(ある程度見えちゃうのは仕組み上どうにもならんので、なるべく残らない
ようにしたいな、と思った)&lt;/p&gt;

&lt;p&gt;で、こういう問題ってみんなある程度持ってそうだし、もっといい既存ツールありそうなんだけど、
うまい検索ワードが思いつかなかったのでとりあえず自分で書いた。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;stty echo; exit 1&amp;quot;&lt;/span&gt; 2
&lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

stty -echo
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;username: &amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;user
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;password: &amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;pass
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;

stty &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# プロキシのアドレスは本物と変えてます&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;http_proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://$user:$pass@10.12.34.56:8888/&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;https_proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://$user:$pass@10.12.34.56:8888/&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# コマンドを実行&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;たとえばこのスクリプトを proxy_cmd.sh という名前でパスの通ったところに置いて、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ proxy_cmd.sh cpanm Plack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかすると、いい感じにユーザ名とかパスワード聞いて、http_proxy とかの環境変数セットして cpanm 叩いてくれます。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>更新で頑張るか、参照で頑張るか</title>
   <link href="http://tsucchi.github.com//sql/2012/07/20/sql-select-or-update"/>
   <updated>2012-07-20T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//sql/2012/07/20/sql-select-or-update</id>
   <content type="html">&lt;p&gt;SQL の話。&lt;/p&gt;

&lt;p&gt;たとえば、あるテーブルに status1 と status2 があったとして、両方が満たされると status_complete になる、
みたいな処理があるとします。&lt;/p&gt;

&lt;p&gt;こういうときは&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_complete&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOME_TABLE&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;みたいな処理を書く人が多いみたいです。僕はこの処理はあんまり好きじゃなくて、status_complete をテーブルのカラムにして、
更新側で&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOME_TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;status_complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;とする方が良いのではないかなー、と思っています。(SELECT 時は普通に status_complete を出す)&lt;/p&gt;

&lt;p&gt;参照側で頑張る、最初のやり方だと、たとえば「status_complete なやつの一覧を出す」とかなった際に、
サブクエリなり、HAVING なりが必要になって、遅い SQL や複雑な SQL になりがちです。インデックスも
張れませんし。&lt;/p&gt;

&lt;p&gt;更新側で頑張る場合だと、たとえば「status1 をキャンセルする」みたいな処理があった場合に、
「status_complete も合わせて落とす」みたいな処理を必ず入れなければならないので、状態遷移
が難しい場合は大変かもしれません。正規化も崩れるので、それを嫌がる人もいるかもね。&lt;/p&gt;

&lt;p&gt;何故参照ではなく、更新で頑張る方が良い、と考えているかですが、一般的に参照の方が更新よりも多いからです。
それから、アプリの作りにもよるのでしょうが、参照のほうが(JOIN とかサブクエリとか使うので) SQL が難しいことが多いです。
まあでも一番大きな理由は、インデックスが張れないってことかなー。&lt;/p&gt;

&lt;p&gt;みんなはどうしてるんだろう？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Active Directory の pwdLastSet を取り扱う</title>
   <link href="http://tsucchi.github.com//perl/2012/07/15/pwd-last-set"/>
   <updated>2012-07-15T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//perl/2012/07/15/pwd-last-set</id>
   <content type="html">&lt;p&gt;Active Directory に LDAP 経由でアクセスした際に入っている pwdLastSet という属性が欲しいのですが、
この数字、「1601-01-01 から始まる 100nsec 単位の秒数」とかいう、何というかセンスがないというか、
取扱いにくいことこの上ないデータだな、と思うのですが、使う必要があったので、取り出し方をいろいろ試した。&lt;/p&gt;

&lt;p&gt;結果、下記のようなコードが良さげ&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;DateTime::Format::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Strptime&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw(strptime)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$strp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;DateTime::Format::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Strptime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;%Y/%m/%d %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pwd_last_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;129852668787146250&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# この変数に AD から取った値が入ったつもり&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pwd_last_set_epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$strp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;1601/01/01 00:00:00&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unix_time_epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$strp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;1970/01/01 00:00:00&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pwd_last_set&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/ 10 /&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#100nsec なので秒に変換&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sec_dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sec_dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pwd_last_set_epoch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unix_time_epoch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_sec_dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_sec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_sec_dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;%Y/%m/%d %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Time::Piece のほうが軽くてわかりやすくて、僕は好きなのですが、1601 年渡したらダメだったみたいなので、
DateTime にしました。あとは最初にかいたロジックどおりに変換かけてるだけです。$real_sec の算出時に $pwd_last_set_epoch を
足してるところは、「引き算じゃないの？」って最初思ってたのですが、$pwd_last_set_epoch が負数になるので足し算でいいっぽいです。
うーん、なんかこの辺バッドノウハウくさい、というか怪しい、というか、32bit/64bit とかで計算結果変わったりしそうで嫌だな。
(一応変わらなかったみたいなのですが)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>gibhub pages + jekyll で blog 作ってみましたの続き</title>
   <link href="http://tsucchi.github.com//blog/2012/07/14/github-pages2"/>
   <updated>2012-07-14T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//blog/2012/07/14/github-pages2</id>
   <content type="html">&lt;p&gt;多分&lt;a href=&quot;2012/07/14/github-pages&quot;&gt;これ&lt;/a&gt;の続きみたいな話&lt;/p&gt;

&lt;p&gt;いくつか書いてみないと良し悪しが分からないので書いてみる。あと、
いろいろ手を入れたんだけど、何をしたか忘れてしまいそうだし。&lt;/p&gt;

&lt;h2&gt;最初にやったこと&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;rbenv + ruby-1.9 の最新っぽいの入れた&lt;/li&gt;
&lt;li&gt;jekyll-bootstrap 入れた。theme は twitter&lt;/li&gt;
&lt;li&gt;なんかサイドバー的なの欲しいよね？&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;サイドバー&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;そもそも jekyll-bootstrap のデフォルトのレイアウトがあんまりサイドバーとか考慮されてないっぽい感じ&lt;/li&gt;
&lt;li&gt;_include/theme/twitter/default.html をいじってサイドバー的な場所をつくる

&lt;ul&gt;
&lt;li&gt;bootstrap 力が低すぎて悩む&lt;/li&gt;
&lt;li&gt;全体にレイアウトする設定があるとか、そんなのしらねーよ。(span が効かなくて悩んだ)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;まあ色々あったが、とりあえずうまく行ったので、sidebar.html とかいうのを作ってそっちに全部追い出す&lt;/li&gt;
&lt;li&gt;あれ？なんか本文とぴったりくっついてて気持ち悪くね？

&lt;ul&gt;
&lt;li&gt;CSS 力が低すぎて悩む&lt;/li&gt;
&lt;li&gt;class=sidebar ってのにいれてるので、そこに padding を設定して解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;これであとは欲しいサイドバーがあれば sidebar.html に足すだけになったので、だいぶ快適になった

&lt;ul&gt;
&lt;li&gt;twitter とかタグとか、とりあえず思いついたの入れる&lt;/li&gt;
&lt;li&gt;記事カレンダー欲しいけど、これはめんどそうなのであとで&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本文の表示がおかしくね？

&lt;ul&gt;
&lt;li&gt;なんで目次しかねーんだよ&lt;/li&gt;
&lt;li&gt;普通最新 N件の本文か本文のサマリだすだろ？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;本文&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;default.html と post.html をいじる&lt;/li&gt;
&lt;li&gt;HTML 力も Markdown 力も低いし、テンプレートエンジンも jekyll の仕組みも全然分からなくて、多分一番悩んだ&lt;/li&gt;
&lt;li&gt;タイトルとか出したいのにうまくいかなくて超悩む&lt;/li&gt;
&lt;li&gt;ここで index.md なるファイルがあることに気づく&lt;/li&gt;
&lt;li&gt;結局内部の仕組みは全然分からんけど、どこをどういうふうにいじれば、どう変わるか分かってきた。。。つもり&lt;/li&gt;
&lt;li&gt;シンタックスハイライトしてなくない？&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;シンタックスハイライト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;なんか pygments とかいうの使うらしいけど、動かねー&lt;/li&gt;
&lt;li&gt;python と pygments のライブラリがいるらしい。しらねーよ。&lt;/li&gt;
&lt;li&gt;入れたらシンタックスハイライトされるようになった気がする&lt;/li&gt;
&lt;li&gt;あれ？本文にタグが出てなくない？&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;タグ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;なんか、&amp;lt;ul&gt; になってて、縦書きされてキモいんですけど&lt;/li&gt;
&lt;li&gt;本文なので、横向き右寄せで出したい

&lt;ul&gt;
&lt;li&gt;&amp;lt;ul&gt; 解除しても効かなくて悩んだ&lt;/li&gt;
&lt;li&gt;_include/JB/tags_list ってのがあって、これが &amp;lt;li&gt;を出してた。そりゃリストになるわな&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;li&gt; 解除。ついでに bootstrap の設定で色つけてみたりした&lt;/li&gt;
&lt;li&gt;右寄せも bootstrap の設定でできた&lt;/li&gt;
&lt;li&gt;あれ？今度はサイドバーのタグがおかしいよー orz&lt;/li&gt;
&lt;li&gt;サイドバーは&amp;lt;li&gt;欲しい

&lt;ul&gt;
&lt;li&gt;tags_list をサイドバー用にコピーして、そっちは&amp;lt;li&gt;つけた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RSS 出てなくない？&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;RSS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;github で誰かが作ってたやつがあったので、パクって設定から読む所の名前とか変えた

&lt;ul&gt;
&lt;li&gt;なんかジェネレータかプラグインかますのかと思ったら、普通に markdown(つかほとんど XML) と for 文だけで表現できるんだねー。おもしろい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RSS のアイコンは、標準のがあるっぽいので落としてそれを置いた&lt;/li&gt;
&lt;li&gt;デザインがひどすぎるだろ?&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;デザイン&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;どうにもなりません。図工苦手なんですよ。。。&lt;/li&gt;
&lt;li&gt;とりあえず、はてダっぽく、見出しに四角い物体をつけてみた&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Facebook のボタンとか出てなくない？とか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;パーツ系はぐぐれば大体でてくる&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;本当はこういうのって&lt;/h2&gt;

&lt;p&gt;git のログとかに残しとくべきですかね？でも試行錯誤すぎて、ログがぐちゃぐちゃになりそうなので
やめたんだよね。HTML まわりは修行が足りないなー、と思う今日この頃です。&lt;/p&gt;

&lt;h2&gt;いじってて思ったこと1&lt;/h2&gt;

&lt;p&gt;emacs で書けるのはやっぱ楽でいいわー。あと、プレビューの確認も F5 一発だしレスポンスも速いし、記事の書きやすさは申し分ない。&lt;/p&gt;

&lt;h2&gt;いじってて思ったこと2&lt;/h2&gt;

&lt;p&gt;Ruby は別に知らなくても使えるんだな。テンプレートエンジンは Ruby のやつっぽいけど。だれか Perl ベースで T::MT とか Xslate とか
使える物体を作ってくれないかなー？作ってみるか？&lt;/p&gt;

&lt;h2&gt;TODO 的な&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;プロフィール書いてねーや&lt;/li&gt;
&lt;li&gt;記事書いたら twitter に放流される仕組みが欲しいな&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>gibhub pages + jekyll で blog 作ってみました</title>
   <link href="http://tsucchi.github.com//blog/2012/07/14/github-pages"/>
   <updated>2012-07-14T00:00:00+09:00</updated>
   <id>http://tsucchi.github.com//blog/2012/07/14/github-pages</id>
   <content type="html">&lt;h2&gt;表題のとおりです。&lt;/h2&gt;

&lt;p&gt;僕は普段&lt;a href=&quot;http://d.hatena.ne.jp/tsucchi1022&quot;&gt;はてダ&lt;/a&gt; に blog 書いてるんですが、jekyll つかって github pages 使うと
github 上に blog 置けるみたいなので試してみた。&lt;/p&gt;

&lt;p&gt;僕はデザインセンスないので、デザインとかどうしたもんか。。。な感じなのではありますが、編集が emacs でできるのが大変ありがたいなー。&lt;/p&gt;

&lt;p&gt;と、言うわけで、blog を今後どうするか考え中なのであります。&lt;/p&gt;
</content>
 </entry>
 
 
</feed>